{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#cjs-shell","title":"CJ's Shell","text":""},{"location":"#introduction","title":"Introduction","text":"<p>CJ's Shell (cjsh) is a POSIX-based interactive shell that pairs familiar script compatibility with integrated modern features. Built in are first-party theme scripting with a custom DSL, a POSIX shell interpreter with bash extensions, customizable keybindings, syntax highlighting, fuzzy completions, smart directory navigation, advanced history search, multiline editing, typeahead, and rich prompts. Everything ships in one binary with a single vendored dependency, so cjsh works out of the box on all *nix-like systems and Windows via WSL. cjsh delivers a POSIX+ experience, standard scripting semantics with an enhanced interactive layer you can dial up or down as needed.</p> <p>The core scripting engine targets roughly 95% POSIX coverage, validated by 1500+ standards-focused tests, while the interactive layer intentionally stretches beyond POSIX through configurable POSIX+ features.</p>"},{"location":"#why-did-i-make-cjsh","title":"Why did I make cjsh?","text":"<p>Truly it was out of spite and annoyance, like all passion projects. I got so tired of all of these different prompt tools, frameworks, different shells entirely. Many of which were non POSIX compliant which basically made them useless for me. I found that no matter what combination of prompt tools, frameworks with different shells on top of having a bunch of rust rewrites of coreutils that it made the shell I was using so bloated, slow, and SO annoying to configure and setup on new machines or if I wanted to add a new tool all the while I felt like these tools could just be so much better. Which is exactly when I said \"I bet I could do this so much better.\" So I did. I set out to basically make bash + zoxide + eza + starship/ohmyposh/p10k + tab completions + auto completions + spell corrections + themes + custom keybindings + syntax highlighting + full multiline editing suite while keeping the scripting surface familiar. Oh and did I mention cjsh only uses one external library which is baked into cjsh itself. Yep, I did all of that. It has taken me a little over a year of on and off work, but I am super proud of where cjsh stands and I am continuing to make constant improvements and additions. It just works.</p>"},{"location":"#why-posix","title":"Why POSIX?","text":"<p>I chose to make cjsh POSIX-based so that it is actually usable in normal and basic terminal interactions and so that it will act and respond the way users expect. Instead of requiring people to learn a proprietary shell language, cjsh uses the basic sh scripting language plus some bash syntax for added functionality. I found that many shell scripts on Stack Overflow or Google for installations, build tools, and other various commands that users would need to run are all in sh. Using these commands in many other shells and they would simply not work or not work as intended and cause unforeseen issues. I did not want any of that. I wanted users to be able to switch over and not notice any difference when it came to interacting with scripting. I also found that I could keep the script engine standards-aligned while layering rich, optional interactive features on top, such as custom <code>cd</code> or <code>ls</code> implementations.</p>"},{"location":"#why-use-cjsh","title":"Why use cjsh?","text":"<p>cjsh was designed to just work. No need for any shell frameworks or custom implementations to download, or having to create your own completions etc. It just works. Themes can be written in a ruby/json like language and it can be written straight into script files and cjsh will know how to handle it. Themes are data oriented, hierarchical, and strongly typed. Almost any interactive feature in cjsh can be customized: keybinds, prompt, theme, syntax highlighting, completions, etc.</p>"},{"location":"getting-started/development/","title":"Want to help?","text":""},{"location":"getting-started/development/#want-to-help","title":"Want to help?","text":"<p>cjsh is in active development and pull requests and issue posts are always appreciated!</p> <p>To get started follow the steps in quick start to clone the master branch! Thanks!</p> <p>Please refer to CONTRIBUTING.md in the root of the repo for more in depth details about code format, style, and verification.</p>"},{"location":"getting-started/development/#testing","title":"Testing","text":"<p>cjsh has a very strict test suite, when going through it you will be able to see that each test script complies to a strict standard. When writing new tests for features you are implementing, please follow this format. </p> <p>The main test harness can be run like this: </p><pre><code>    ./tests/run_shell_tests.sh\n</code></pre><p></p> <p>Please be sure to have a freshly compiled cjsh in the build directory before running. Also the test suite cannot be run inside or with another cjsh instance running on the same machine.</p> <p>To produce a clean build of cjsh run: </p><pre><code>    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release\n    cmake --build build --config Release --parallel --clean-first\n</code></pre><p></p>"},{"location":"getting-started/development/#themes","title":"Themes","text":"<p>I love themes, the more the merrier! If you have one you would like to contribute please do so! Themes can be hosted on the main repository if you would like. See the themes page for details on how to develop these and what tools you have at your disposal.</p>"},{"location":"getting-started/development/#documentation","title":"Documentation","text":"<p>Please. Anything helps.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":""},{"location":"getting-started/quick-start/#quick-start","title":"Quick Start","text":"<p>This guide gets you running cjsh, a POSIX-based interactive shell with integrated modern features, as quickly as possible.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>A standard C/C++ Compiler:</p> <ul> <li>GCC</li> <li>clang</li> </ul> <p>And CMake 3.25 or newer.</p> <p>And that is it! cjsh has no external dependencies and was designed like this for pure simplicity. To just work where ever.</p>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<p>cjsh can be downloaded or built in multiple different ways.</p>"},{"location":"getting-started/quick-start/#as-a-package","title":"As a package","text":"<p>cjsh is available through multiple package managers:</p>"},{"location":"getting-started/quick-start/#homebrew-macoslinux","title":"Homebrew (macOS/Linux)","text":"<pre><code>    brew tap CadenFinley/tap\n    brew install cjsh\n</code></pre>"},{"location":"getting-started/quick-start/#arch-linux-aur","title":"Arch Linux (AUR)","text":"<pre><code>    # Using yay\n    yay -S cjsh\n\n    # Using paru\n    paru -S cjsh\n\n    # Or manually\n    git clone https://aur.archlinux.org/cjsh.git\n    cd cjsh\n    makepkg -si\n</code></pre> <p>Hopefully more package managers to come as cjsh gets bigger.</p>"},{"location":"getting-started/quick-start/#manual-building-and-installation","title":"Manual building and installation","text":"<p>cjsh is super easy to download and install. Everything is hosted on the github repo at: <code>https://github.com/CadenFinley/CJsShell</code> </p> <p>The master branch holds the most recent commits and may not always be stable and may have breaking changes with no backwards compatibility. For the most stable release, stick to using the latest tagged release from the public GitHub releases.</p> <p>cjsh is still in active, rapid development so even the latest release can still have breaking changes with no backwards compatibilities, although they will always be noted in the release if they exist.</p> <pre><code>    # First clone the repo\n    git clone https://github.com/CadenFinley/CJsShell &amp;&amp; cd CJsShell\n\n    # Configure a Release build (outputs to ./build)\n    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release\n\n    # Compile using all available cores\n    cmake --build build --config Release --j$(nproc)\n</code></pre> <p>After building, the <code>cjsh</code> executable will be in the <code>build/</code> directory. You can run it directly with <code>./build/cjsh</code></p>"},{"location":"getting-started/quick-start/#build-info","title":"Build info","text":"<p>By default the commands above produce an optimized Release build.</p> <ul> <li>Pass <code>-DCMAKE_BUILD_TYPE=Debug</code> to build with sanitizers and full debug info.</li> <li>Pass <code>-DCJSH_MINIMAL_BUILD=ON</code> for the ultra-small binary profile.</li> <li><code>cmake --build build --target clean</code> removes the build artifacts.</li> <li>Disable compile database emission with <code>-DCJSH_GENERATE_COMPILE_COMMANDS=OFF</code> if your tooling does not need it.</li> <li>Install the binary anywhere with <code>cmake --install build --config Release --prefix ~/.local</code> (adjust the prefix as desired).</li> <li>Export <code>CJSH_STRIP_BINARY=0</code> before configuring to keep symbols in non-Debug builds.</li> </ul> <p>As before, git revision information is embedded automatically; use <code>CJSH_GIT_HASH_OVERRIDE</code> if you need to pin a custom value.</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have cjsh installed, check out What You Need to Know to learn about all the powerful features available out of the box and how to configure them to suit your workflow.</p>"},{"location":"getting-started/what-to-know/","title":"What You Need to Know","text":""},{"location":"getting-started/what-to-know/#what-you-need-to-know","title":"What You Need to Know","text":"<p>Welcome to CJ's Shell (cjsh)! This guide highlights the interactive features that ship enabled by default and explains how to tailor them to your workflow.</p>"},{"location":"getting-started/what-to-know/#visual-interface-features","title":"Visual &amp; Interface Features","text":""},{"location":"getting-started/what-to-know/#themes","title":"Themes","text":"<p>Status: Enabled Configure: Load a theme with <code>source path/to/theme.cjsh</code> or embed a <code>theme_definition</code> directly inside <code>~/.cjshrc</code>. Disable: Start cjsh with <code>--no-themes</code> or add <code>cjshopt login-startup-arg --no-themes</code> to <code>~/.cjprofile</code>.</p> <p>Themes live in the <code>themes/</code> directory and can be customized or authored from scratch using the theme DSL. Sourcing a theme in <code>~/.cjshrc</code> applies it automatically on startup.</p>"},{"location":"getting-started/what-to-know/#true-color-support","title":"True Color Support","text":"<p>Status: Enabled when the terminal advertises 24-bit color. Configure: Automatically detected; adjust styling through theme definitions. Disable: Launch with <code>cjsh --no-colors</code> or persist by adding <code>cjshopt login-startup-arg --no-colors</code> to <code>~/.cjprofile</code>.</p>"},{"location":"getting-started/what-to-know/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Status: Enabled Configure: Change token styles with <code>cjshopt style_def &lt;token_type&gt; &lt;style&gt;</code>. Disable: Start cjsh with <code>--no-syntax-highlighting</code> or add <code>cjshopt login-startup-arg --no-syntax-highlighting</code> inside <code>~/.cjprofile</code>.</p>"},{"location":"getting-started/what-to-know/#completion-line-editing","title":"Completion &amp; Line Editing","text":""},{"location":"getting-started/what-to-know/#fuzzy-completions","title":"Fuzzy Completions","text":"<p>Status: Enabled (always on) Fuzzy matching powers command, path, and argument completions without additional configuration.</p>"},{"location":"getting-started/what-to-know/#completion-preview","title":"Completion Preview","text":"<p>Status: Enabled Configure: <code>cjshopt completion-preview on|off|status</code></p>"},{"location":"getting-started/what-to-know/#spell-correction","title":"Spell Correction","text":"<p>Status: Enabled Configure: <code>cjshopt completion-spell on|off|status</code></p>"},{"location":"getting-started/what-to-know/#completion-case-sensitivity","title":"Completion Case Sensitivity","text":"<p>Status: Disabled (completions are case-insensitive) Configure: <code>cjshopt completion-case on|off|status</code></p>"},{"location":"getting-started/what-to-know/#auto-tab-expansion","title":"Auto-Tab Expansion","text":"<p>Status: Disabled Configure: <code>cjshopt auto-tab on|off|status</code> (auto-inserts a completion when the match is unique)</p>"},{"location":"getting-started/what-to-know/#inline-hints-delay","title":"Inline Hints &amp; Delay","text":"<p>Status: Enabled Configure:</p> <pre><code>cjshopt hint on|off|status\ncjshopt hint-delay &lt;milliseconds|status&gt;\n</code></pre>"},{"location":"getting-started/what-to-know/#inline-help-prompts","title":"Inline Help Prompts","text":"<p>Status: Enabled Configure: <code>cjshopt inline-help on|off|status</code></p>"},{"location":"getting-started/what-to-know/#visible-whitespace-markers","title":"Visible Whitespace Markers","text":"<p>Status: Disabled Configure: <code>cjshopt visible-whitespace on|off|status</code></p>"},{"location":"getting-started/what-to-know/#multiline-editing","title":"Multiline Editing","text":"<p>Status: Enabled Configure:</p> <pre><code>cjshopt multiline on|off|status\ncjshopt multiline-indent on|off|status\ncjshopt multiline-start-lines &lt;count|status&gt;\ncjshopt line-numbers &lt;absolute|relative|off|status&gt;\ncjshopt current-line-number-highlight on|off|status\n</code></pre>"},{"location":"getting-started/what-to-know/#navigation-features","title":"Navigation Features","text":""},{"location":"getting-started/what-to-know/#smart-cd","title":"Smart <code>cd</code>","text":"<p>Status: Enabled Disable: Run cjsh with <code>--no-smart-cd</code> or add <code>cjshopt login-startup-arg --no-smart-cd</code> to <code>~/.cjprofile</code>.</p> <p>Smart <code>cd</code> adds fuzzy directory matching and automatically records bookmarks. Manage bookmarks with:</p> <pre><code>cjshopt set-max-bookmarks &lt;number&gt;    # limit stored locations (10\u20131000, default 100)\ncjshopt bookmark-blacklist list       # inspect ignored paths\ncjshopt bookmark-blacklist add &lt;path&gt;\ncjshopt bookmark-blacklist remove &lt;path&gt;\n</code></pre>"},{"location":"getting-started/what-to-know/#directory-listings","title":"Directory Listings","text":"<p>cjsh leaves directory listing behavior up to your configuration. Add an <code>ls</code> wrapper, hook, or alias in <code>~/.cjshrc</code> if you prefer automatic listings after <code>cd</code>.</p>"},{"location":"getting-started/what-to-know/#history-features","title":"History Features","text":"<ul> <li>History expansions: Enabled in interactive sessions (<code>!!</code>, <code>!$</code>, etc.). Disable with <code>cjsh --no-history-expansion</code> or persist by adding <code>cjshopt login-startup-arg --no-history-expansion</code> to <code>~/.cjprofile</code>.</li> <li>Reverse search: Press <code>Ctrl+R</code> for fuzzy, incremental history search.</li> <li>Persistence: History entries are appended to <code>~/.cache/cjsh/history.txt</code>; duplicate commands are suppressed by default.</li> <li>Retention: Adjust limits with <code>cjshopt set-history-max &lt;number|default|status&gt;</code>.</li> </ul>"},{"location":"getting-started/what-to-know/#configuration-compatibility","title":"Configuration &amp; Compatibility","text":""},{"location":"getting-started/what-to-know/#startup-files","title":"Startup Files","text":"<ul> <li><code>~/.cjprofile</code> \u2013 Executed for login shells before interactive setup.</li> <li><code>~/.cjshrc</code> \u2013 Interactive configuration (aliases, themes, hooks, etc.).</li> <li><code>~/.cjsh_logout</code> \u2013 Optional cleanup script sourced on exit.</li> </ul>"},{"location":"getting-started/what-to-know/#persisting-startup-flags","title":"Persisting Startup Flags","text":"<p><code>cjshopt login-startup-arg</code> is only valid while configuration files are being sourced. Call it once per flag inside <code>~/.cjprofile</code>:</p> <pre><code># ~/.cjprofile\ncjshopt login-startup-arg --no-themes\ncjshopt login-startup-arg --no-smart-cd\ncjshopt login-startup-arg --show-startup-time\n</code></pre> <p>Supported flags: <code>--login</code>, <code>--interactive</code>, <code>--debug</code>, <code>--no-themes</code>, <code>--no-colors</code>, <code>--no-titleline</code>, <code>--show-startup-time</code>, <code>--no-source</code>, <code>--no-completions</code>, <code>--no-syntax-highlighting</code>, <code>--no-smart-cd</code>, <code>--no-prompt</code>, <code>--minimal</code>, and <code>--startup-test</code>.</p>"},{"location":"getting-started/what-to-know/#posix-bash-compatibility","title":"POSIX &amp; Bash Compatibility","text":"<p>cjsh targets high POSIX coverage for scripting while providing POSIX+ extensions such as <code>[[ ... ]]</code>, brace expansion, here-strings, process substitution, and rich redirection semantics. POSIX+ behavior is opt-in through flags or configuration.</p>"},{"location":"getting-started/what-to-know/#extended-interactive-tools","title":"Extended Interactive Tools","text":""},{"location":"getting-started/what-to-know/#abbreviations","title":"Abbreviations","text":"<p>Define inline expansions with the <code>abbr</code> builtin:</p> <pre><code>abbr gs='git status --short --branch'\nabbr                 # list abbreviations\nunabbr gs            # remove an abbreviation\n</code></pre>"},{"location":"getting-started/what-to-know/#typeahead","title":"Typeahead","text":"<p>Keystrokes are buffered while commands run so no input is lost. This is always enabled.</p>"},{"location":"getting-started/what-to-know/#key-bindings","title":"Key Bindings","text":"<p>Inspect or tweak key bindings with:</p> <pre><code>cjshopt keybind list                   # safe at runtime\ncjshopt keybind profile list           # show available profiles\ncjshopt keybind profile set vi         # choose vi bindings (persist in ~/.cjshrc)\ncjshopt keybind set &lt;action&gt; &lt;keys&gt;    # redefine bindings (run from config files)\ncjshopt keybind add &lt;action&gt; &lt;keys&gt;    # append bindings (run from config files)\n</code></pre> <p>Use <code>cjshopt keybind --help</code> for the full action catalog. For custom widgets, see the <code>widget</code> builtin in the reference documentation.</p>"},{"location":"getting-started/what-to-know/#getting-help","title":"Getting Help","text":"<ul> <li><code>help</code> \u2013 Overview of built-in commands.</li> <li><code>help &lt;builtin&gt;</code> \u2013 Detailed usage for a specific builtin.</li> <li><code>cjshopt --help</code> and <code>cjshopt &lt;subcommand&gt; --help</code> \u2013 Configuration guidance.</li> <li>Documentation lives under <code>docs/reference/</code> for deeper dives into editing, scripting, hooks, and themes.</li> </ul>"},{"location":"getting-started/what-to-know/#quick-configuration-examples","title":"Quick Configuration Examples","text":"<pre><code># Toggle completion preview for the current session\ncjshopt completion-preview off\n\n# Enable inline whitespace markers\ncjshopt visible-whitespace on\n\n# Switch to vi key bindings (add to ~/.cjshrc to persist)\ncjshopt keybind profile set vi\n\n# Increase history retention\ncjshopt set-history-max 5000\n</code></pre> <p>Persist startup flags by placing commands like the following in <code>~/.cjprofile</code>:</p> <pre><code>cjshopt login-startup-arg --no-colors\ncjshopt login-startup-arg --no-smart-cd\n</code></pre> <p>Run <code>cjshopt --help</code> for a complete list of interactive toggles and their detailed help screens.</p>"},{"location":"integration/starship/","title":"Starship Prompt","text":""},{"location":"integration/starship/#starship-prompt-integration","title":"Starship Prompt Integration","text":""},{"location":"integration/starship/#prerequisites","title":"Prerequisites","text":"<p>Make sure the Starship binary is installed and on your <code>$PATH</code>:</p> <pre><code>brew install starship\n</code></pre> <p>Any installation method supported by Starship (cargo, curl script, distro package, etc.) will work-the theme only shells out to the executable.</p>"},{"location":"integration/starship/#install-the-bundled-theme","title":"Install the bundled theme","text":"<p>Copy the example theme somewhere cjsh can load it on startup. The snippet below keeps everything under <code>~/.config/cjsh</code>, but any readable path works.</p> <pre><code>mkdir -p ~/.config/cjsh/themes\ncp /path/to/CJsShell/themes/starship_example.cjsh ~/.config/cjsh/themes/starship.cjsh\n</code></pre> <p>Feel free to rename the destination file; just keep the suffix <code>.cjsh</code>.</p>"},{"location":"integration/zoxide/","title":"Zoxide","text":""},{"location":"integration/zoxide/#zoxide-integration","title":"Zoxide Integration","text":""},{"location":"integration/zoxide/#prerequisites","title":"Prerequisites","text":"<p>Before enabling the integration, make sure you have zoxide installed and on your <code>$PATH</code>:</p> <pre><code>brew install zoxide\n</code></pre> <p>Any other installation method supported by zoxide works too, cjsh only needs the executable.</p>"},{"location":"integration/zoxide/#enabling-the-integration-in-cjshrc","title":"Enabling the integration in <code>~/.cjshrc</code>","text":"<p>Add the following block to your <code>~/.cjshrc</code>.</p> <pre><code>    if [ -z \"${__CJSH_ZOXIDE_INITIALIZED:-}\" ]; then\n        __cjsh_zoxide_cd() {\n            if builtin cd \"$@\"; then\n                return 0\n            fi\n            cd \"$@\"\n        }\n\n        z() {\n            if [ \"$#\" -eq 0 ]; then\n                __cjsh_zoxide_cd ~ &amp;&amp; __cjsh_zoxide_track_pwd\n            elif [ \"$#\" -eq 1 ] &amp;&amp; [ \"$1\" = '-' ]; then\n                if [ -n \"${OLDPWD:-}\" ]; then\n                    __cjsh_zoxide_cd \"$OLDPWD\" &amp;&amp; __cjsh_zoxide_track_pwd\n                else\n                    printf 'zoxide: $OLDPWD is not set\\n' &gt;&amp;2\n                    return 1\n                fi\n            elif [ \"$#\" -eq 1 ] &amp;&amp; [ -d \"$1\" ]; then\n                __cjsh_zoxide_cd \"$1\" &amp;&amp; __cjsh_zoxide_track_pwd\n            else\n                __CJSH_ZOXIDE_RESULT=\"$(command zoxide query --exclude \"$(pwd)\" -- \"$@\")\"\n                __CJSH_ZOXIDE_STATUS=$?\n                if [ \"${__CJSH_ZOXIDE_STATUS}\" -eq 0 ] &amp;&amp; [ -n \"$__CJSH_ZOXIDE_RESULT\" ]; then\n                    __cjsh_zoxide_cd \"$__CJSH_ZOXIDE_RESULT\" &amp;&amp; __cjsh_zoxide_track_pwd\n                else\n                    unset __CJSH_ZOXIDE_RESULT\n                    return $__CJSH_ZOXIDE_STATUS\n                fi\n                unset __CJSH_ZOXIDE_RESULT\n                unset __CJSH_ZOXIDE_STATUS\n            fi\n        }\n\n        zi() {\n            __CJSH_ZOXIDE_RESULT=\"$(command zoxide query --interactive -- \"$@\")\"\n            __CJSH_ZOXIDE_STATUS=$?\n            if [ \"${__CJSH_ZOXIDE_STATUS}\" -eq 0 ] &amp;&amp; [ -n \"$__CJSH_ZOXIDE_RESULT\" ]; then\n                __cjsh_zoxide_cd \"$__CJSH_ZOXIDE_RESULT\" &amp;&amp; __cjsh_zoxide_track_pwd\n            else\n                unset __CJSH_ZOXIDE_RESULT\n                return $__CJSH_ZOXIDE_STATUS\n            fi\n            unset __CJSH_ZOXIDE_RESULT\n            unset __CJSH_ZOXIDE_STATUS\n        }\n\n        __cjsh_zoxide_track_pwd() {\n            command zoxide add -- \"$(pwd)\"\n        }\n\n        if command -v hook &gt;/dev/null 2&gt;&amp;1; then\n            hook add chpwd __cjsh_zoxide_track_pwd &gt;/dev/null 2&gt;&amp;1\n        fi\n        __cjsh_zoxide_track_pwd\n\n        __CJSH_ZOXIDE_INITIALIZED=1\n    fi\n</code></pre>"},{"location":"reference/commands/","title":"Built-in Commands","text":""},{"location":"reference/commands/#built-in-commands-reference","title":"Built-in Commands Reference","text":"<p>CJ's Shell provides a comprehensive set of built-in commands that are available without requiring external programs. These commands are optimized for both interactive use and shell scripting.</p>"},{"location":"reference/commands/#navigation-and-file-system","title":"Navigation and File System","text":""},{"location":"reference/commands/#cd","title":"cd","text":"<p>Change the current working directory.</p> <pre><code>cd [directory]\n</code></pre> <ul> <li>Use <code>cd</code> without arguments to go to home directory</li> <li>Use <code>cd -</code> to switch to the previous directory</li> <li>Smart CD is enabled by default with fuzzy matching and bookmark support</li> </ul>"},{"location":"reference/commands/#pwd","title":"pwd","text":"<p>Print the current working directory.</p> <pre><code>pwd\n</code></pre>"},{"location":"reference/commands/#text-output","title":"Text Output","text":""},{"location":"reference/commands/#echo","title":"echo","text":"<p>Print arguments separated by spaces.</p> <pre><code>echo [args...]\n</code></pre>"},{"location":"reference/commands/#printf","title":"printf","text":"<p>Format and print data using printf-style specifiers.</p> <pre><code>printf format [arguments...]\n</code></pre>"},{"location":"reference/commands/#shell-control","title":"Shell Control","text":""},{"location":"reference/commands/#exit-quit","title":"exit / quit","text":"<p>Leave the shell with an optional exit status.</p> <pre><code>exit [n]\nquit [n]\n</code></pre>"},{"location":"reference/commands/#help","title":"help","text":"<p>Display the CJSH command reference.</p> <pre><code>help\n</code></pre>"},{"location":"reference/commands/#version","title":"version","text":"<p>Show cjsh version information.</p> <pre><code>version\n</code></pre>"},{"location":"reference/commands/#script-execution","title":"Script Execution","text":""},{"location":"reference/commands/#source","title":"source / .","text":"<p>Execute commands from a file in the current shell context.</p> <pre><code>source filename [arguments...]\n. filename [arguments...]\n</code></pre>"},{"location":"reference/commands/#eval","title":"eval","text":"<p>Evaluate a string as shell code.</p> <pre><code>eval [args...]\n</code></pre>"},{"location":"reference/commands/#exec","title":"exec","text":"<p>Replace the shell process with another program.</p> <pre><code>exec command [args...]\n</code></pre>"},{"location":"reference/commands/#syntax","title":"syntax","text":"<p>Check scripts or command strings for syntax issues.</p> <pre><code>syntax [script_file]\n</code></pre>"},{"location":"reference/commands/#variables-and-environment","title":"Variables and Environment","text":""},{"location":"reference/commands/#export","title":"export","text":"<p>Set or display environment variables.</p> <pre><code>export [name[=value]...]\n</code></pre>"},{"location":"reference/commands/#unset","title":"unset","text":"<p>Remove environment variables.</p> <pre><code>unset name [name...]\n</code></pre>"},{"location":"reference/commands/#local","title":"local","text":"<p>Declare local variables inside functions.</p> <pre><code>local name[=value] [name[=value]...]\n</code></pre>"},{"location":"reference/commands/#readonly","title":"readonly","text":"<p>Mark variables as read-only.</p> <pre><code>readonly name[=value] [name[=value]...]\n</code></pre>"},{"location":"reference/commands/#set","title":"set","text":"<p>Adjust shell options or positional parameters.</p> <pre><code>set [options] [args...]\n</code></pre>"},{"location":"reference/commands/#shift","title":"shift","text":"<p>Rotate positional parameters to the left.</p> <pre><code>shift [n]\n</code></pre>"},{"location":"reference/commands/#aliases","title":"Aliases","text":""},{"location":"reference/commands/#alias","title":"alias","text":"<p>Create or list command aliases.</p> <pre><code>alias [name[=value]...]\n</code></pre>"},{"location":"reference/commands/#unalias","title":"unalias","text":"<p>Remove command aliases.</p> <pre><code>unalias name [name...]\n</code></pre>"},{"location":"reference/commands/#abbreviations","title":"Abbreviations","text":""},{"location":"reference/commands/#abbr","title":"abbr","text":"<p>Create, update, or list fish-style abbreviations that expand during interactive editing.</p> <pre><code>abbr [name=expansion ...]\n</code></pre> <ul> <li>Run without arguments to display all configured abbreviations</li> <li>Use <code>name=expansion</code> pairs to set or update entries</li> <li>Triggers that contain whitespace are rejected</li> <li>Abbreviations expand when the trigger is followed by whitespace or when the line is submitted</li> <li>Two defaults are shipped with cjsh: <code>abbr</code> \u2192 <code>abbreviate</code> and <code>unabbr</code> \u2192 <code>unabbreviate</code></li> </ul>"},{"location":"reference/commands/#unabbr","title":"unabbr","text":"<p>Remove one or more fish-style abbreviations.</p> <pre><code>unabbr name [name...]\n</code></pre> <ul> <li>Removing a non-existent abbreviation prints a warning but does not stop processing the rest</li> <li>Pair with <code>abbr</code> to keep a clean set of triggers in your session configuration</li> </ul>"},{"location":"reference/commands/#control-flow","title":"Control Flow","text":""},{"location":"reference/commands/#if","title":"if","text":"<p>Run conditional blocks in scripts.</p> <pre><code>if condition; then\n    commands\n[elif condition; then\n    commands]\n[else\n    commands]\nfi\n</code></pre>"},{"location":"reference/commands/#test","title":"test / [","text":"<p>Evaluate POSIX test expressions.</p> <pre><code>test expression\n[ expression ]\n</code></pre>"},{"location":"reference/commands/#_1","title":"[[","text":"<p>Evaluate extended test expressions (bash-style).</p> <pre><code>[[ expression ]]\n</code></pre>"},{"location":"reference/commands/#break","title":"break","text":"<p>Exit the current loop.</p> <pre><code>break [n]\n</code></pre>"},{"location":"reference/commands/#continue","title":"continue","text":"<p>Skip to the next loop iteration.</p> <pre><code>continue [n]\n</code></pre>"},{"location":"reference/commands/#return","title":"return","text":"<p>Exit the current function with an optional status.</p> <pre><code>return [n]\n</code></pre>"},{"location":"reference/commands/#_2","title":":","text":"<p>No-op command that always succeeds.</p> <pre><code>:\n</code></pre>"},{"location":"reference/commands/#job-control","title":"Job Control","text":""},{"location":"reference/commands/#jobs","title":"jobs","text":"<p>List background jobs.</p> <pre><code>jobs\n</code></pre>"},{"location":"reference/commands/#fg","title":"fg","text":"<p>Bring a job to the foreground.</p> <pre><code>fg [job_spec]\n</code></pre>"},{"location":"reference/commands/#bg","title":"bg","text":"<p>Resume a job in the background.</p> <pre><code>bg [job_spec]\n</code></pre>"},{"location":"reference/commands/#wait","title":"wait","text":"<p>Wait for jobs or processes to finish.</p> <pre><code>wait [pid|job_spec...]\n</code></pre>"},{"location":"reference/commands/#kill","title":"kill","text":"<p>Send signals to jobs or processes.</p> <pre><code>kill [-signal] pid|job_spec\n</code></pre>"},{"location":"reference/commands/#signal-handling","title":"Signal Handling","text":""},{"location":"reference/commands/#trap","title":"trap","text":"<p>Set signal handlers or list existing traps.</p> <pre><code>trap [action] [signal...]\n</code></pre>"},{"location":"reference/commands/#command-information","title":"Command Information","text":""},{"location":"reference/commands/#type","title":"type","text":"<p>Explain how a command name will be resolved.</p> <pre><code>type name [name...]\n</code></pre>"},{"location":"reference/commands/#which","title":"which","text":"<p>Locate executables in PATH.</p> <pre><code>which name [name...]\n</code></pre>"},{"location":"reference/commands/#hash","title":"hash","text":"<p>Cache command lookups or display the cache.</p> <pre><code>hash [-r] [name...]\n</code></pre>"},{"location":"reference/commands/#builtin","title":"builtin","text":"<p>Run a builtin directly, bypassing functions and PATH.</p> <pre><code>builtin command [args...]\n</code></pre>"},{"location":"reference/commands/#command","title":"command","text":"<p>Execute a command while bypassing shell functions or print information about it.</p> <pre><code>command [-pVv] COMMAND [ARG...]\n</code></pre> <p>Options: - <code>-p</code> \u2013 Temporarily use the default <code>PATH</code> of <code>/usr/bin:/bin</code> when resolving <code>COMMAND</code> - <code>-v</code> \u2013 Print a short description of how <code>COMMAND</code> would be resolved - <code>-V</code> \u2013 Print a verbose description (builtin, full path, or not found)</p> <p>When no inspection flags are supplied, <code>command</code> runs the target using the shell's execution engine, allowing you to bypass shell functions that shadow external commands. The command returns the exit status of the invoked program.</p>"},{"location":"reference/commands/#validate","title":"validate","text":"<p>Toggle command validation or verify command names.</p> <pre><code>validate [on|off|command_name]\n</code></pre>"},{"location":"reference/commands/#hook-system","title":"Hook System","text":""},{"location":"reference/commands/#hook","title":"hook","text":"<p>Manage shell hooks that run at key lifecycle moments.</p> <pre><code>hook &lt;add|remove|list|clear&gt; [hook_type] [function_name]\n</code></pre> <p>Hook types include <code>precmd</code>, <code>preexec</code>, and <code>chpwd</code>. Use <code>hook add</code> inside configuration files to register functions and <code>hook list</code> to inspect active hooks. See <code>hooks.md</code> for complete examples and best practices.</p>"},{"location":"reference/commands/#inputoutput","title":"Input/Output","text":""},{"location":"reference/commands/#read","title":"read","text":"<p>Read user input into variables.</p> <pre><code>read [options] name [name...]\n</code></pre>"},{"location":"reference/commands/#getopts","title":"getopts","text":"<p>Parse positional parameters as short options.</p> <pre><code>getopts optstring name [args...]\n</code></pre>"},{"location":"reference/commands/#history","title":"History","text":""},{"location":"reference/commands/#history_1","title":"history","text":"<p>Display command history.</p> <pre><code>history [n]\n</code></pre> <ul> <li>Without arguments, displays all history entries</li> <li>With a number <code>n</code>, displays the last <code>n</code> entries</li> <li>History is stored in <code>~/.cache/cjsh/history.txt</code></li> </ul>"},{"location":"reference/commands/#fc","title":"fc","text":"<p>Fix Command - edit and re-execute commands from history (POSIX-compliant).</p> <pre><code>fc [-e editor] [-ln] [first [last]]\n</code></pre> <p>Options: - <code>-e editor</code> - Use specified editor (default: <code>$FCEDIT</code>, <code>$EDITOR</code>, or <code>vi</code>) - <code>-l</code> - List commands instead of editing - <code>-n</code> - Suppress line numbers when listing - <code>-r</code> - Reverse order of commands when listing</p> <p>Arguments: - <code>first</code> - First command to edit/list (default: previous command) - <code>last</code> - Last command to edit/list (default: same as first)</p> <p>Examples:</p> <pre><code># Edit the previous command in your editor\nfc\n\n# Edit command number 53\nfc 53\n\n# Edit commands 10 through 15\nfc 10 15\n\n# List last 16 commands\nfc -l\n\n# List commands 10 through 20\nfc -l 10 20\n\n# Edit with a specific editor\nfc -e nano\n\n# Use with environment variables\nexport FCEDIT=nano\nfc  # Will use nano as the editor\n</code></pre> <p>How it works: 1. Opens the specified command(s) in your editor 2. When you save and exit the editor, the modified command is displayed 3. The modified command is automatically executed 4. The result is added to history</p> <p>Environment Variables: - <code>FCEDIT</code> - Preferred editor for <code>fc</code> (checked first) - <code>EDITOR</code> - Fallback editor if <code>FCEDIT</code> is not set - Default is <code>ed</code> if neither variable is set (POSIX requirement)</p> <p>Tip: For a better editing experience, set your preferred editor: </p><pre><code>export FCEDIT=vi     # or nano, emacs, etc.\nexport EDITOR=vi     # fallback for other tools too\n</code></pre><p></p>"},{"location":"reference/commands/#system-information","title":"System Information","text":""},{"location":"reference/commands/#times","title":"times","text":"<p>Show CPU usage for the shell and its children.</p> <pre><code>times\n</code></pre>"},{"location":"reference/commands/#umask","title":"umask","text":"<p>Show or set the file creation mask.</p> <pre><code>umask [mode]\n</code></pre>"},{"location":"reference/commands/#theming-and-customization","title":"Theming and Customization","text":""},{"location":"reference/commands/#loading-themes","title":"Loading Themes","text":"<p>To load custom themes, use the <code>source</code> command with your theme file:</p> <pre><code>source path/to/theme.cjsh\n</code></pre> <p>You can add this to your <code>~/.cjshrc</code> file to automatically load a theme on startup.</p>"},{"location":"reference/commands/#cjshopt","title":"cjshopt","text":"<p>Generate config files and adjust cjsh options.</p> <pre><code>cjshopt &lt;subcommand&gt; [options]\n</code></pre> <p>Available subcommands: - <code>style_def</code> - Define or redefine syntax highlighting styles - <code>login-startup-arg</code> - Add startup flags (config file only) - <code>completion-case</code> - Configure completion case sensitivity - <code>completion-spell</code> - Toggle spell correction suggestions in completions - <code>line-numbers</code> - Configure line numbers in multiline input (on/off/relative/absolute) - <code>current-line-number-highlight</code> - Toggle highlighting of the current line number - <code>hint-delay</code> - Set hint display delay in milliseconds - <code>completion-preview</code> - Configure completion preview - <code>visible-whitespace</code> - Toggle visible whitespace characters in the editor - <code>hint</code> - Configure inline hints - <code>multiline-indent</code> - Configure auto-indent in multiline input - <code>multiline</code> - Configure multiline input mode - <code>inline-help</code> - Configure inline help messages - <code>auto-tab</code> - Configure automatic tab completion - <code>keybind</code> - Inspect or modify key bindings (modifications config file only) - <code>generate-profile</code> - Create or overwrite ~/.cjprofile - <code>generate-rc</code> - Create or overwrite ~/.cjshrc - <code>generate-logout</code> - Create or overwrite ~/.cjsh_logout - <code>set-max-bookmarks</code> - Limit stored directory bookmarks - <code>set-history-max</code> - Configure history persistence limits - <code>bookmark-blacklist</code> - Manage directories excluded from bookmarking</p>"},{"location":"reference/commands/#cjsh-widget","title":"cjsh-widget","text":"<p>Interact with the embedded line editor (isocline) to drive advanced key bindings.</p> <pre><code>cjsh-widget &lt;subcommand&gt; [...]\n</code></pre> <p>Available subcommands include: - <code>get-buffer</code> / <code>set-buffer</code> \u2013 Read or replace the active input buffer - <code>get-cursor</code> / <code>set-cursor</code> \u2013 Inspect or move the cursor (byte offsets) - <code>insert</code> / <code>append</code> / <code>clear</code> \u2013 Modify buffer contents near the cursor or reset the line - <code>accept</code> \u2013 Simulate pressing Enter to submit the current buffer</p> <p>These commands are primarily used from custom key bindings and widgets rather than typed interactively. Combine them with <code>cjshopt keybind ext</code> inside <code>~/.cjshrc</code> to create bespoke editing behaviors.</p>"},{"location":"reference/commands/#login-startup-arg","title":"login-startup-arg","text":"<p>Persist startup flags that should be applied before the interactive configuration is sourced. This command is only honored inside startup files such as <code>~/.cjprofile</code>; running it at an interactive prompt prints an error.</p> <pre><code>cjshopt login-startup-arg &lt;flag&gt;\n</code></pre> <p>Supported flags:</p> Flag Effect <code>--login</code> Mark the current shell instance as a login shell <code>--interactive</code> Force interactive startup behavior <code>--debug</code> Enable verbose startup debugging <code>--no-themes</code> Disable theme initialization <code>--no-colors</code> Disable colored output <code>--no-titleline</code> Skip the dynamic title line <code>--show-startup-time</code> Print how long startup took <code>--no-source</code> Skip sourcing <code>~/.cjshrc</code> <code>--no-completions</code> Disable the completion system <code>--no-syntax-highlighting</code> Disable syntax highlighting <code>--no-smart-cd</code> Use the basic <code>cd</code> implementation <code>--no-prompt</code> Use a minimal <code>#</code> prompt instead of the themed prompt <code>--minimal</code> Disable all cjsh extras (themes, colors, completions, smart cd, etc.) <code>--startup-test</code> Enable startup test mode <p>Add one line per flag in <code>~/.cjprofile</code> to persist the desired behavior:</p> <pre><code># Inside ~/.cjprofile\ncjshopt login-startup-arg --minimal\ncjshopt login-startup-arg --show-startup-time\n</code></pre>"},{"location":"reference/commands/#completion-case","title":"completion-case","text":"<p>Toggle whether tab completions treat case as significant. Synonyms such as <code>enable</code>, <code>disable</code>, <code>true</code>, and <code>false</code> are also accepted for convenience.</p> <pre><code>cjshopt completion-case &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt completion-case on      # Case-sensitive matching\ncjshopt completion-case off     # Case-insensitive matching (default)\ncjshopt completion-case status  # Show the current mode\n</code></pre> <p>Add the command to <code>~/.cjshrc</code> if you want the preference remembered across sessions.</p>"},{"location":"reference/commands/#completion-spell","title":"completion-spell","text":"<p>Enable, disable, or inspect spell correction inside the completion engine. When enabled, cjsh will try to fix minor typos before offering suggestions. The subcommand also accepts synonyms such as <code>enable</code>, <code>disable</code>, <code>true</code>, <code>false</code>, and <code>--status</code>.</p> <pre><code>cjshopt completion-spell &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt completion-spell on       # Turn on spell correction\ncjshopt completion-spell status   # Display the current state\n</code></pre> <p>Persist the choice by placing the command in <code>~/.cjshrc</code>.</p>"},{"location":"reference/commands/#line-numbers","title":"line-numbers","text":"<p>Enable, disable, or inspect line numbers in multiline input mode. When enabled, cjsh will display numbers on the left side of multiline input, making it easier to navigate and edit multi-line commands or scripts. You can choose between absolute numbering (the default) or relative numbering, which shows the distance to the active cursor line.</p> <pre><code>cjshopt line-numbers &lt;on|off|relative|absolute|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt line-numbers on       # Enable line numbers in multiline input\ncjshopt line-numbers relative # Switch to relative numbering\ncjshopt line-numbers off      # Disable line numbers in multiline input\ncjshopt line-numbers status   # Show the current setting\n</code></pre> <p>Add the command to <code>~/.cjshrc</code> to persist the setting across sessions. The subcommand also accepts synonyms such as <code>enable</code>, <code>disable</code>, <code>true</code>, <code>false</code>, <code>absolute</code>, and <code>rel</code>/<code>relative</code>.</p> <p>Tip: Style the line numbers themselves with <code>cjshopt style_def ic-linenumbers \"color=#FFB86C\"</code> (or any other style). See <code>cjshopt style_def</code> for the full list of supported style directives.</p>"},{"location":"reference/commands/#current-line-number-highlight","title":"current-line-number-highlight","text":"<p>Enable or disable highlighting of the current line number in multiline input mode. When enabled (default), the line number for the line containing the cursor is displayed in a different style than other line numbers.</p> <pre><code>cjshopt current-line-number-highlight &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt current-line-number-highlight on      # Enable current line highlighting\ncjshopt current-line-number-highlight off     # Disable current line highlighting\ncjshopt current-line-number-highlight status  # Show the current setting\n</code></pre> <p>Add the command to <code>~/.cjshrc</code> to persist the setting across sessions. Accepts synonyms like <code>enable</code>, <code>disable</code>, <code>true</code>, and <code>false</code>.</p> <p>Tip: Customize the current line number style with <code>cjshopt style_def ic-linenumber-current \"bold color=#FFB86C\"</code> to make it stand out from regular line numbers styled with <code>ic-linenumbers</code>.</p>"},{"location":"reference/commands/#hint-delay","title":"hint-delay","text":"<p>Configure the delay (in milliseconds) before inline hints are displayed. This controls how quickly the shell shows suggestions and hints as you type.</p> <pre><code>cjshopt hint-delay &lt;milliseconds&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt hint-delay 100     # Set hint delay to 100 milliseconds\ncjshopt hint-delay 0       # Show hints immediately\ncjshopt hint-delay status  # Show the current delay setting\n</code></pre> <ul> <li>Valid range: 0 and above (0 shows hints immediately)</li> <li>Default: Varies based on system configuration</li> </ul> <p>Place the command in <code>~/.cjshrc</code> to keep the delay setting between sessions.</p>"},{"location":"reference/commands/#completion-preview","title":"completion-preview","text":"<p>Toggle the completion preview feature, which shows a preview of the selected completion as you navigate through completion options.</p> <pre><code>cjshopt completion-preview &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt completion-preview on      # Enable completion preview\ncjshopt completion-preview off     # Disable completion preview\ncjshopt completion-preview status  # Show the current setting\n</code></pre> <p>The subcommand accepts synonyms such as <code>enable</code>, <code>disable</code>, <code>true</code>, and <code>false</code>. Add to <code>~/.cjshrc</code> to persist the preference.</p>"},{"location":"reference/commands/#visible-whitespace","title":"visible-whitespace","text":"<p>Show or hide visible markers for whitespace characters (such as spaces) while editing commands. When enabled, spaces are rendered with a subtle middle-dot marker so you can spot trailing or double spacing issues.</p> <pre><code>cjshopt visible-whitespace &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt visible-whitespace on      # Show whitespace markers while editing\ncjshopt visible-whitespace off     # Hide whitespace markers (default)\ncjshopt visible-whitespace status  # Show the current setting\n</code></pre> <p>Add the command to <code>~/.cjshrc</code> to keep the preference across sessions. Synonyms like <code>enable</code>, <code>disable</code>, <code>true</code>, and <code>false</code> are accepted.</p>"},{"location":"reference/commands/#hint","title":"hint","text":"<p>Enable, disable, or inspect inline hints that appear as you type commands. Hints can include suggestions, command completions, and other helpful information.</p> <pre><code>cjshopt hint &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt hint on       # Enable inline hints\ncjshopt hint off      # Disable inline hints\ncjshopt hint status   # Show the current setting\n</code></pre> <p>Synonyms like <code>enable</code>, <code>disable</code>, <code>true</code>, and <code>false</code> are supported. Persist the setting by adding the command to <code>~/.cjshrc</code>.</p>"},{"location":"reference/commands/#multiline-indent","title":"multiline-indent","text":"<p>Configure automatic indentation in multiline input mode. When enabled, the shell will automatically indent continuation lines based on the context (e.g., after opening braces, parentheses, or control structures).</p> <pre><code>cjshopt multiline-indent &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt multiline-indent on       # Enable automatic indentation\ncjshopt multiline-indent off      # Disable automatic indentation\ncjshopt multiline-indent status   # Show the current setting\n</code></pre> <p>This is particularly useful when writing shell scripts or complex commands directly in the shell. Add to <code>~/.cjshrc</code> to keep the setting. Accepts synonyms such as <code>enable</code>, <code>disable</code>, <code>true</code>, and <code>false</code>.</p>"},{"location":"reference/commands/#multiline","title":"multiline","text":"<p>Enable or disable multiline input mode entirely. When enabled, you can enter commands that span multiple lines. When disabled, the shell treats each line as a separate command.</p> <pre><code>cjshopt multiline &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt multiline on       # Enable multiline input\ncjshopt multiline off      # Disable multiline input\ncjshopt multiline status   # Show the current setting\n</code></pre> <p>Disabling multiline mode may be useful for simple command execution or when working with scripts that don't require multi-line editing. Accepts synonyms like <code>enable</code>, <code>disable</code>, <code>true</code>, and <code>false</code>. Persist by adding to <code>~/.cjshrc</code>.</p>"},{"location":"reference/commands/#inline-help","title":"inline-help","text":"<p>Toggle inline help messages that appear as you type commands. These messages can provide quick information about command syntax, options, and usage.</p> <pre><code>cjshopt inline-help &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt inline-help on       # Enable inline help messages\ncjshopt inline-help off      # Disable inline help messages\ncjshopt inline-help status   # Show the current setting\n</code></pre> <p>Supports synonyms such as <code>enable</code>, <code>disable</code>, <code>true</code>, and <code>false</code>. Add the command to <code>~/.cjshrc</code> to make the setting permanent.</p>"},{"location":"reference/commands/#auto-tab","title":"auto-tab","text":"<p>Configure automatic tab completion behavior. When enabled, the shell may automatically complete commands or show completions without requiring explicit tab key presses. Disabled by default.</p> <pre><code>cjshopt auto-tab &lt;on|off|status&gt;\n</code></pre> <p>Examples:</p> <pre><code>cjshopt auto-tab on       # Enable automatic tab completion\ncjshopt auto-tab off      # Disable automatic tab completion (default)\ncjshopt auto-tab status   # Show the current setting\n</code></pre> <p>Accepts synonyms including <code>enable</code>, <code>disable</code>, <code>true</code>, and <code>false</code>. Place in <code>~/.cjshrc</code> to persist the preference across sessions.</p>"},{"location":"reference/commands/#keybind","title":"keybind","text":"<p>Inspect or customize isocline key bindings. Modifying bindings requires running the command from a configuration file (<code>~/.cjshrc</code>); runtime changes are only supported for inspection.</p> <pre><code>cjshopt keybind &lt;subcommand&gt; [...]\n</code></pre> <p>Key subcommands include:</p> <ul> <li><code>list</code> - Show the active profile plus default vs. custom bindings (runtime safe)</li> <li><code>set &lt;action&gt; &lt;keys...&gt;</code> - Replace bindings for an action</li> <li><code>add &lt;action&gt; &lt;keys...&gt;</code> - Add additional bindings for an action</li> <li><code>clear &lt;keys...&gt;</code> - Remove the provided key specifications</li> <li><code>clear-action &lt;action&gt;</code> - Remove all custom bindings for an action</li> <li><code>reset</code> - Drop every custom binding and restore defaults</li> <li><code>profile list</code> - List available key binding profiles (runtime safe)</li> <li><code>profile set &lt;name&gt;</code> - Persist the named profile</li> </ul> <p>Key specifications accept pipe (<code>|</code>) separated alternatives, so <code>Ctrl+K|Ctrl+X</code> is a single argument covering both sequences. Place commands like <code>cjshopt keybind set cursor-left \"Ctrl+H\"</code> in <code>~/.cjshrc</code> to keep them between sessions.</p>"},{"location":"reference/commands/#set-max-bookmarks","title":"set-max-bookmarks","text":"<p>Control how many directory bookmarks the smart <code>cd</code> feature retains.</p> <pre><code>cjshopt set-max-bookmarks &lt;number&gt;\n</code></pre> <ul> <li>Valid range: 10 \u2013 1000</li> <li>Default: 100</li> </ul> <p>Examples:</p> <pre><code>cjshopt set-max-bookmarks 200\n</code></pre> <p>Persist the limit by adding the command to <code>~/.cjshrc</code>.</p>"},{"location":"reference/commands/#set-history-max","title":"set-history-max","text":"<p>Adjust the number of entries stored in the persistent history file.</p> <pre><code>cjshopt set-history-max &lt;number|default|status&gt;\n</code></pre> <ul> <li>Provide a number between 0 and 5000 (0 disables history persistence entirely)</li> <li>Use <code>default</code> to restore the built-in limit of 200 entries</li> <li>Use <code>status</code> (or <code>--status</code>) to display the current setting</li> </ul> <p>Examples:</p> <pre><code>cjshopt set-history-max 0        # Disable history persistence\ncjshopt set-history-max 500      # Retain the latest 500 commands\ncjshopt set-history-max default  # Go back to the default limit\ncjshopt set-history-max status   # Show the current limit\n</code></pre> <p>Commands added to <code>~/.cjshrc</code> are applied automatically at startup.</p>"},{"location":"reference/commands/#bookmark-blacklist","title":"bookmark-blacklist","text":"<p>Manage a list of directories that should never be bookmarked by the smart <code>cd</code> feature. Adding a path automatically removes any existing bookmarks that point to it.</p> <pre><code>cjshopt bookmark-blacklist &lt;subcommand&gt; [path]\n</code></pre> <p>Available subcommands: - <code>add &lt;path&gt;</code> - Add a directory to the blacklist - <code>remove &lt;path&gt;</code> - Remove a directory from the blacklist - <code>list</code> - Display all blacklisted directories - <code>clear</code> - Remove every entry from the blacklist</p> <p>Examples:</p> <pre><code>cjshopt bookmark-blacklist add /tmp\ncjshopt bookmark-blacklist add ~/.cache\ncjshopt bookmark-blacklist list\ncjshopt bookmark-blacklist remove /tmp\ncjshopt bookmark-blacklist clear\n</code></pre> <p>This is ideal for keeping temporary or system directories out of your bookmark suggestions. Add the relevant commands to <code>~/.cjshrc</code> to keep the blacklist synchronized between sessions.</p>"},{"location":"reference/editing/","title":"Interactive Editing","text":""},{"location":"reference/editing/#interactive-line-editing","title":"Interactive Line Editing","text":"<p>CJ's Shell uses the isocline line editor library to provide a powerful and feature-rich interactive editing experience. This document details all editing features currently available in cjsh.</p>"},{"location":"reference/editing/#overview","title":"Overview","text":"<p>Isocline is a modern, pure C line editing library that provides advanced terminal interaction capabilities. CJ's Shell leverages and extends isocline to offer:</p> <ul> <li>Multiline editing with intelligent indentation</li> <li>Real-time syntax highlighting</li> <li>Context-aware tab completion</li> <li>Inline hints and preview suggestions</li> <li>Customizable key bindings</li> <li>Line numbering for multiline input</li> <li>Optional visible markers for whitespace characters</li> <li>History search and management</li> <li>Brace matching and auto-insertion</li> <li>Spell correction</li> <li>Fish-style abbreviations (automatic expansion on word boundaries)</li> </ul> <p>All of these features can be configured through the <code>cjshopt</code> command or in your <code>~/.cjshrc</code> configuration file.</p>"},{"location":"reference/editing/#core-editing-features","title":"Core Editing Features","text":""},{"location":"reference/editing/#multiline-input","title":"Multiline Input","text":"<p>CJ's Shell supports seamless multiline input for complex commands, heredocs, and incomplete statements.</p> <p>Features: - Automatic continuation when lines are incomplete - Smart indentation that aligns with the initial prompt - Line numbers for easy navigation - Both absolute and relative line numbering modes</p> <p>Configuration: </p><pre><code># Enable/disable multiline input (enabled by default)\ncjshopt multiline on|off|status\n\n# Enable/disable automatic indentation (enabled by default)\ncjshopt multiline-indent on|off|status\n\n# Configure how many prompt lines are shown before typing (default: 1)\ncjshopt multiline-start-lines &lt;count|status&gt;\n</code></pre><p></p> <p>Multiline Detection: CJ's Shell automatically enters multiline mode when: - A line ends with a backslash (<code>\\</code>) - Quotes are unclosed (<code>\"</code>, <code>'</code>, or backticks) - Control structures are incomplete (<code>if</code>, <code>while</code>, <code>for</code>, <code>case</code>, etc.) - Heredocs are being entered (<code>&lt;&lt;</code>, <code>&lt;&lt;-</code>) - Brackets/braces/parentheses are unclosed</p>"},{"location":"reference/editing/#line-numbers","title":"Line Numbers","text":"<p>When in multiline mode, line numbers help track your position in the input.</p> <p>Modes: - Absolute numbering: Shows actual line numbers (1, 2, 3, ...) - Relative numbering: Shows distance from current line (0 for current, \u00b1N for others)</p> <p>Configuration: </p><pre><code># Enable absolute line numbers (default)\ncjshopt line-numbers on\ncjshopt line-numbers absolute\n\n# Enable relative line numbers\ncjshopt line-numbers relative\n\n# Disable line numbers\ncjshopt line-numbers off\n\n# Check current status\ncjshopt line-numbers status\n</code></pre><p></p> <p>Current Line Highlighting: The line containing the cursor can be highlighted differently: </p><pre><code># Enable/disable current line number highlighting (enabled by default)\ncjshopt current-line-number-highlight on|off|status\n</code></pre><p></p> <p>The line number styles can be customized: - <code>ic-linenumbers</code>: Style for regular line numbers - <code>ic-linenumber-current</code>: Style for the current line number</p>"},{"location":"reference/editing/#visible-whitespace-markers","title":"Visible Whitespace Markers","text":"<p>You can visualize whitespace characters while editing to spot stray spaces or indentation issues. When enabled, spaces are rendered using a subtle middle-dot marker.</p> <p>Configuration: </p><pre><code># Show or hide visible whitespace markers (disabled by default)\ncjshopt visible-whitespace on|off|status\n</code></pre><p></p> <p>Pair this option with custom styling via <code>cjshopt style_def ic-whitespace-char \"&lt;style&gt;\"</code> to adjust the marker color.</p>"},{"location":"reference/editing/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Real-time syntax highlighting provides visual feedback as you type.</p> <p>Highlighted Elements: - Commands (builtins, executables, aliases) - Keywords (<code>if</code>, <code>then</code>, <code>else</code>, <code>while</code>, <code>for</code>, etc.) - Strings (single and double quoted) - Variables and parameter expansions - Operators (pipes, redirections, logical operators) - Comments - Errors (unmatched quotes, invalid syntax)</p> <p>Configuration: </p><pre><code># Enable/disable syntax highlighting (enabled by default)\n# Note: Can also be controlled with --no-syntax-highlighting flag\n\n# Customize highlighting styles\ncjshopt style_def &lt;token_type&gt; &lt;style&gt;\n</code></pre><p></p> <p>Available Style Names: - <code>ic-keyword</code>: Shell keywords - <code>ic-command</code>: Valid commands - <code>ic-error</code>: Invalid commands or syntax errors - <code>ic-string</code>: String literals - <code>ic-comment</code>: Comments - <code>ic-operator</code>: Operators - <code>ic-variable</code>: Variables - <code>ic-number</code>: Numeric literals - <code>ic-bracket</code>: Brackets and braces - <code>ic-bracket-match</code>: Matching bracket pairs</p> <p>Syntax Highlighting Control: The syntax highlighter can be temporarily disabled with the <code>--no-syntax-highlighting</code> startup flag.</p>"},{"location":"reference/editing/#completion-system","title":"Completion System","text":"<p>CJ's Shell features a sophisticated completion system that provides context-aware suggestions.</p> <p>Completion Types: - Command completion: Completes commands from PATH, builtins, aliases, and functions - File/directory completion: Completes paths with proper quoting and escaping - Variable completion: Completes shell variable names - User completion: Completes usernames (after <code>~</code>) - Hostname completion: Completes hostnames (for ssh, scp, etc.)</p> <p>Features: - Fuzzy matching for typo tolerance - Frequency-based ranking (commonly used completions appear first) - Source attribution (shows where completions come from) - Preview of selected completion - Automatic expansion with auto-tab</p> <p>Configuration: </p><pre><code># Enable/disable completion preview (enabled by default)\ncjshopt completion-preview on|off|status\n\n# Enable/disable auto-tab (disabled by default)\n# Auto-tab automatically completes unique prefixes\ncjshopt auto-tab on|off|status\n\n# Configure case sensitivity (enabled by default)\ncjshopt completion-case on|off|status\n\n# Enable/disable spell correction (enabled by default)\ncjshopt completion-spell on|off|status\n</code></pre><p></p> <p>Using Completions: - Press <code>Tab</code> to show completions - Press <code>Tab</code> again to cycle through options - Use arrow keys to navigate the completion menu - Press <code>Enter</code> to accept a completion - Press <code>Esc</code> to cancel</p>"},{"location":"reference/editing/#hints-and-inline-help","title":"Hints and Inline Help","text":"<p>CJ's Shell provides inline hints and help to assist with command input.</p> <p>Hints: When there's a single possible completion, a hint is displayed inline with dimmed text.</p> <p>Features: - Shows the rest of the word being typed - Appears after a configurable delay - Can be accepted by pressing \u2192 (right arrow)</p> <p>Configuration: </p><pre><code># Enable/disable hints (enabled by default)\ncjshopt hint on|off|status\n\n# Set hint delay in milliseconds (0ms by default)\ncjshopt hint-delay &lt;milliseconds&gt;\n</code></pre><p></p> <p>Inline Help: Short help messages are displayed for certain operations: - History search instructions - Completion menu navigation - Special key binding hints</p> <p>Configuration: </p><pre><code># Enable/disable inline help (enabled by default)\ncjshopt inline-help on|off|status\n</code></pre><p></p> <p>Full Help: Press <code>F1</code> at any time to display the complete key binding cheat sheet, regardless of the inline-help setting.</p>"},{"location":"reference/editing/#fish-style-abbreviations","title":"Fish-Style Abbreviations","text":"<p>CJ's Shell supports fish-style abbreviations that expand typed shortcuts into longer phrases as soon as you type a whitespace character or submit the line. This is powered directly by the isocline editor, so expansions happen inline without disrupting your cursor position or undo history.</p> <p>Usage: - Define abbreviations with the <code>abbr</code> builtin: <code>abbr gs='git status --short --branch'</code> - Remove them with <code>unabbr</code>: <code>unabbr gs</code> - List all active abbreviations by running <code>abbr</code> with no arguments</p> <p>Behavior: - Triggers expand when followed by a space, tab, newline, or when you press <code>Enter</code> - Expansion text is inserted in place of the trigger, preserving subsequent input - Abbreviations live in the current shell session and persist across reads within that session</p> <p>Defaults: - <code>abbr</code> \u2192 <code>abbreviate</code> - <code>unabbr</code> \u2192 <code>unabbreviate</code></p> <p>Add <code>abbr</code> definitions to your <code>~/.cjshrc</code> to load them automatically on startup.</p>"},{"location":"reference/editing/#brace-matching-and-auto-insertion","title":"Brace Matching and Auto-Insertion","text":"<p>Visual feedback for matching brackets, braces, and parentheses.</p> <p>Brace Matching: When the cursor is next to a brace, its matching pair is highlighted. Unmatched braces are highlighted as errors.</p> <p>Default Brace Pairs: - Parentheses: <code>()</code> - Square brackets: <code>[]</code> - Curly braces: <code>{}</code></p> <p>Auto-Insertion: When you type an opening brace, the closing brace is automatically inserted (enabled by default).</p> <p>Default Auto-Insertion Pairs: - Parentheses: <code>()</code> - Square brackets: <code>[]</code> - Curly braces: <code>{}</code> - Double quotes: <code>\"\"</code> - Single quotes: <code>''</code></p> <p>Note: Brace matching and auto-insertion are currently controlled by isocline's default settings and cannot be configured via <code>cjshopt</code>, but the feature is active.</p>"},{"location":"reference/editing/#history-management","title":"History Management","text":""},{"location":"reference/editing/#history-features","title":"History Features","text":"<p>CJ's Shell maintains a persistent command history with advanced search capabilities.</p> <p>Features: - Persistent history across sessions - Configurable maximum entries - Duplicate suppression - History expansion (<code>!</code>, <code>!!</code>, <code>!$</code>, etc.) - Incremental search</p> <p>Configuration: </p><pre><code># Set maximum history entries\ncjshopt set-history-max &lt;number&gt;\n\n# Use default history size\ncjshopt set-history-max default\n\n# Check current setting\ncjshopt set-history-max status\n</code></pre><p></p> <p>History File: History is stored at <code>~/.cache/cjsh/history.txt</code></p> <p>Duplicate Handling: By default, duplicate entries are not stored in history to keep it clean and relevant.</p>"},{"location":"reference/editing/#history-search","title":"History Search","text":"<p>Incremental Search (Ctrl+R): 1. Press <code>Ctrl+R</code> to enter search mode 2. Type to search through history 3. Press <code>Ctrl+R</code> again to find the next match 4. Press <code>Enter</code> to execute the found command 5. Press <code>Esc</code> to cancel search</p> <p>History Navigation: - <code>\u2191</code> (Up Arrow): Previous command - <code>\u2193</code> (Down Arrow): Next command - <code>Alt+&lt;</code>: Jump to oldest history entry - <code>Alt+&gt;</code>: Jump to newest history entry</p>"},{"location":"reference/editing/#key-bindings","title":"Key Bindings","text":"<p>CJ's Shell supports customizable key bindings with multiple profiles.</p>"},{"location":"reference/editing/#key-binding-profiles","title":"Key Binding Profiles","text":"<p>Available Profiles: - <code>emacs</code>: Emacs-style key bindings (default) - <code>vi</code>: Vi/Vim-style key bindings</p> <p>Set Profile: </p><pre><code>cjshopt keybind profile set emacs|vi\n</code></pre><p></p>"},{"location":"reference/editing/#common-key-bindings-emacs-mode","title":"Common Key Bindings (Emacs Mode)","text":""},{"location":"reference/editing/#cursor-movement","title":"Cursor Movement","text":"<ul> <li><code>Ctrl+A</code>: Move to beginning of line</li> <li><code>Ctrl+E</code>: Move to end of line</li> <li><code>Ctrl+F</code> / <code>\u2192</code>: Move forward one character</li> <li><code>Ctrl+B</code> / <code>\u2190</code>: Move backward one character</li> <li><code>Alt+F</code>: Move forward one word</li> <li><code>Alt+B</code>: Move backward one word</li> <li><code>\u2191</code>: Previous line (or previous history)</li> <li><code>\u2193</code>: Next line (or next history)</li> </ul>"},{"location":"reference/editing/#editing","title":"Editing","text":"<ul> <li><code>Ctrl+D</code>: Delete character under cursor (or exit if line is empty)</li> <li><code>Ctrl+H</code> / <code>Backspace</code>: Delete character before cursor</li> <li><code>Ctrl+W</code>: Delete word before cursor</li> <li><code>Alt+D</code>: Delete word after cursor</li> <li><code>Ctrl+U</code>: Delete from cursor to beginning of line</li> <li><code>Ctrl+K</code>: Delete from cursor to end of line</li> <li><code>Ctrl+Y</code>: Paste (yank) last deleted text</li> <li><code>Ctrl+T</code>: Transpose characters</li> <li><code>Alt+T</code>: Transpose words</li> </ul>"},{"location":"reference/editing/#history","title":"History","text":"<ul> <li><code>Ctrl+R</code>: Incremental history search (reverse)</li> <li><code>Ctrl+S</code>: Incremental history search (forward)</li> <li><code>\u2191</code>: Previous history entry</li> <li><code>\u2193</code>: Next history entry</li> <li><code>Alt+&lt;</code>: First history entry</li> <li><code>Alt+&gt;</code>: Last history entry</li> </ul>"},{"location":"reference/editing/#completion","title":"Completion","text":"<ul> <li><code>Tab</code>: Trigger completion / cycle through completions</li> <li><code>Shift+Tab</code>: Cycle backward through completions</li> </ul>"},{"location":"reference/editing/#special","title":"Special","text":"<ul> <li><code>Ctrl+C</code>: Cancel current input</li> <li><code>Ctrl+D</code>: Exit shell (when buffer is empty)</li> <li><code>Ctrl+L</code>: Clear screen</li> <li><code>Enter</code>: Execute command</li> <li><code>F1</code>: Show help / key binding cheat sheet</li> <li><code>Esc</code>: Cancel operation</li> </ul>"},{"location":"reference/editing/#custom-key-bindings","title":"Custom Key Bindings","text":"<p>You can inspect and customize key bindings through the <code>cjshopt keybind</code> subcommands:</p> <pre><code># List all current key bindings (safe at runtime)\ncjshopt keybind list\n\n# Show available key binding profiles\ncjshopt keybind profile list\n\n# Activate a key binding profile (add to ~/.cjshrc to persist)\ncjshopt keybind profile set vi\n\n# Replace bindings for an action (config file only)\ncjshopt keybind set cursor-left ctrl-h|left\n\n# Add bindings without removing existing ones (config file only)\ncjshopt keybind add delete-word-end alt-d\n\n# Remove specific key bindings (config file only)\ncjshopt keybind clear ctrl-h ctrl-b\n\n# Remove all custom bindings for an action (config file only)\ncjshopt keybind clear-action delete-word-end\n\n# Restore default bindings (config file only)\ncjshopt keybind reset\n</code></pre> <p>Key Specification Format: - <code>ctrl-&lt;key&gt;</code>: Control key combinations (e.g., <code>ctrl-a</code>) - <code>alt-&lt;key&gt;</code>: Alt/Meta key combinations (e.g., <code>alt-f</code>) - <code>shift-&lt;key&gt;</code>: Shift key combinations (e.g., <code>shift-tab</code>) - <code>f&lt;N&gt;</code>: Function keys (e.g., <code>f1</code>, <code>f12</code>) - <code>&lt;key&gt;</code>: Regular keys (e.g., <code>tab</code>, <code>enter</code>)</p>"},{"location":"reference/editing/#command-driven-key-bindings","title":"Command-Driven Key Bindings","text":"<p>Use the extended key binding namespace to trigger shell commands directly from key presses:</p> <pre><code># List custom command key bindings (safe at runtime)\ncjshopt keybind ext list\n\n# Bind Ctrl+G to run a command (add to ~/.cjshrc)\ncjshopt keybind ext set ctrl-g 'cjsh-widget accept'\n\n# Remove a command binding\ncjshopt keybind ext clear ctrl-g\n\n# Clear every custom command binding\ncjshopt keybind ext reset\n</code></pre> <p>Command key bindings typically leverage the <code>cjsh-widget</code> builtin to read or modify editor state. As with standard bindings, modifications must be placed in configuration files; inspection commands can run interactively, but setters only take effect during startup.</p>"},{"location":"reference/editing/#prompt-customization","title":"Prompt Customization","text":""},{"location":"reference/editing/#prompt-cleanup","title":"Prompt Cleanup","text":"<p>Control how the prompt is displayed after accepting input.</p> <p>Features: - Removes full prompt and shows only trailing segment - Optional empty line insertion - Multiline truncation</p> <p>Configuration: CJ's Shell automatically manages prompt cleanup based on your theme's settings. Theme authors can control: - <code>cleanup_removes_prompt()</code>: Whether to enable prompt cleanup - <code>cleanup_adds_empty_line()</code>: Whether to add an empty line after - <code>cleanup_truncates_multiline()</code>: Whether to truncate multiline input</p>"},{"location":"reference/editing/#prompt-markers","title":"Prompt Markers","text":"<p>The prompt system uses markers to indicate different states:</p> <p>Primary Prompt Marker: Displayed at the end of the main prompt (default: <code>\"&gt; \"</code>).</p> <p>Continuation Prompt Marker: Displayed for continuation lines in multiline input.</p> <p>Customization: These are typically set by your theme and control the visual appearance of prompts.</p>"},{"location":"reference/editing/#terminal-features","title":"Terminal Features","text":""},{"location":"reference/editing/#color-support","title":"Color Support","text":"<p>CJ's Shell automatically detects terminal capabilities:</p> <p>Color Depth Detection: - Monochrome (1-bit) - 8 colors (3-bit) with bold for bright - 16 colors (4-bit) - 256 colors (8-bit) - True color (24-bit RGB)</p> <p>Environment Variables: - <code>COLORTERM</code>: Indicates color capability (<code>truecolor</code>, <code>24bit</code>, <code>256color</code>, etc.)</p> <p>Disable Colors: Use the <code>--no-colors</code> flag or set <code>TERM=dumb</code> to disable all color output.</p>"},{"location":"reference/editing/#bbcode-formatting","title":"BBCode Formatting","text":"<p>CJ's Shell supports BBCode-style formatting in prompts and output:</p> <p>Tags: - <code>[b]...[/b]</code>: Bold text - <code>[i]...[/i]</code>: Italic text - <code>[u]...[/u]</code>: Underline text - <code>[r]...[/r]</code>: Reverse video - <code>[color]...[/color]</code>: Color names (e.g., <code>[red]</code>, <code>[blue]</code>) - <code>[#RRGGBB]...[/]</code>: Hex RGB colors - <code>[on color]...[/]</code>: Background colors</p> <p>Style Combinations: </p><pre><code>[b red on blue]Bold red text on blue background[/]\n[i #ff00ff]Italic magenta text[/]\n</code></pre><p></p>"},{"location":"reference/editing/#advanced-features","title":"Advanced Features","text":""},{"location":"reference/editing/#spell-correction","title":"Spell Correction","text":"<p>Automatic spell correction for commands and completions.</p> <p>How It Works: When no exact match is found, cjsh attempts to find the closest match using edit distance algorithms.</p> <p>Configuration: </p><pre><code># Enable/disable spell correction (enabled by default)\ncjshopt completion-spell on|off|status\n</code></pre><p></p>"},{"location":"reference/editing/#heredoc-support","title":"Heredoc Support","text":"<p>Full editing capabilities when entering heredocs:</p> <pre><code>cat &lt;&lt;EOF\n# You get full editing features here:\n# - Syntax highlighting\n# - Multiline editing\n# - History access\n# - All normal key bindings\nEOF\n</code></pre> <p>Features: - Each line is edited with full isocline capabilities - Supports <code>&lt;&lt;-</code> (strip leading tabs) - Delimiter detection ends input - Ctrl+C/Ctrl+D cancels heredoc input</p>"},{"location":"reference/editing/#readline-integration","title":"Readline Integration","text":"<p>CJ's Shell uses isocline's unified <code>ic_readline()</code> API for input, which provides:</p> <p>Inline Right Text: Some prompts may display additional information on the right side of the input line (configured by themes).</p> <p>Initial Input: Commands can pre-populate the input buffer (used by <code>fc</code> command for editing).</p> <p>Special Return Values: - <code>IC_READLINE_TOKEN_CTRL_C</code>: Returned when Ctrl+C is pressed on empty buffer - <code>IC_READLINE_TOKEN_CTRL_D</code>: Returned when Ctrl+D is pressed on empty buffer (EOF)</p>"},{"location":"reference/editing/#non-tty-mode","title":"Non-TTY Mode","text":"<p>When standard input is not a terminal (pipe, file redirect, debugger, etc.): - Line editing is disabled - Input is read directly from the stream - Prompts are still displayed but without styling - Scripts and pipes work seamlessly</p>"},{"location":"reference/editing/#style-definitions","title":"Style Definitions","text":"<p>All visual aspects of the editor can be customized through style definitions.</p>"},{"location":"reference/editing/#available-styles","title":"Available Styles","text":"<p>Prompt Styles: - <code>ic-prompt</code>: Main prompt text - <code>ic-linenumbers</code>: Line numbers in multiline mode - <code>ic-linenumber-current</code>: Current line number highlight</p> <p>Syntax Highlighting Styles: - <code>ic-keyword</code>: Shell keywords - <code>ic-command</code>: Valid commands - <code>ic-error</code>: Errors and invalid commands - <code>ic-string</code>: String literals - <code>ic-comment</code>: Comments - <code>ic-operator</code>: Operators - <code>ic-variable</code>: Variables - <code>ic-number</code>: Numbers - <code>ic-bracket</code>: Brackets - <code>ic-bracket-match</code>: Matching brackets</p> <p>Editor Styles: - <code>ic-hint</code>: Inline hints - <code>ic-selection</code>: Selected text - <code>ic-completion</code>: Completion menu - <code>ic-completion-selected</code>: Selected completion</p>"},{"location":"reference/editing/#style-syntax","title":"Style Syntax","text":"<pre><code>cjshopt style_def &lt;style-name&gt; \"&lt;bbcode-style&gt;\"\n</code></pre> <p>Examples: </p><pre><code># Make errors bright red and bold\ncjshopt style_def ic-error \"bold red\"\n\n# Use custom RGB color for commands\ncjshopt style_def ic-command \"#00ff00\"\n\n# Style keywords with italic blue\ncjshopt style_def ic-keyword \"italic blue\"\n\n# Combine multiple attributes\ncjshopt style_def ic-string \"italic #ffaa00\"\n</code></pre><p></p> <p>Style Attributes: - Colors: <code>red</code>, <code>blue</code>, <code>green</code>, <code>yellow</code>, <code>cyan</code>, <code>magenta</code>, <code>white</code>, <code>black</code> - ANSI colors: <code>ansi-red</code>, <code>ansi-bright-blue</code>, etc. - RGB colors: <code>#RRGGBB</code> or <code>#RGB</code> - Attributes: <code>bold</code>, <code>italic</code>, <code>underline</code>, <code>reverse</code> - Background: <code>on &lt;color&gt;</code></p>"},{"location":"reference/editing/#configuration-examples","title":"Configuration Examples","text":""},{"location":"reference/editing/#complete-editing-configuration","title":"Complete Editing Configuration","text":"<p>Here's a comprehensive example for <code>~/.cjshrc</code>:</p> <pre><code># Multiline settings\ncjshopt multiline on\ncjshopt multiline-indent on\ncjshopt line-numbers relative\ncjshopt current-line-number-highlight on\n\n# Completion settings\ncjshopt completion-preview on\ncjshopt auto-tab off\ncjshopt completion-case off  # Case-insensitive completions\ncjshopt completion-spell on\n\n# Hint settings\ncjshopt hint on\ncjshopt hint-delay 100  # 100ms delay before showing hints\n\n# Help settings\ncjshopt inline-help on\n\n# History\ncjshopt set-history-max 10000\n\n# Key bindings\ncjshopt keybind profile set emacs\n\n# Syntax highlighting styles\ncjshopt style_def ic-keyword \"bold blue\"\ncjshopt style_def ic-command \"green\"\ncjshopt style_def ic-error \"bold red\"\ncjshopt style_def ic-string \"#ffaa00\"\ncjshopt style_def ic-comment \"italic #888888\"\ncjshopt style_def ic-operator \"bold\"\n</code></pre>"},{"location":"reference/editing/#minimal-configuration","title":"Minimal Configuration","text":"<p>For a minimal, fast setup:</p> <pre><code># Use the --minimal flag at startup, or configure selectively:\ncjshopt multiline on\ncjshopt line-numbers off\ncjshopt completion-preview off\ncjshopt hint off\ncjshopt inline-help off\n</code></pre>"},{"location":"reference/editing/#performance-considerations","title":"Performance Considerations","text":""},{"location":"reference/editing/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Disable unnecessary features in resource-constrained environments</li> <li>Increase hint delay if experiencing lag while typing</li> <li>Reduce history size for faster search</li> <li>Use simpler themes to reduce prompt rendering time</li> </ol>"},{"location":"reference/editing/#benchmarks","title":"Benchmarks","text":"<p>Isocline is designed to be fast and responsive: - Completion generation: &lt; 10ms for typical cases - Syntax highlighting: Real-time with no noticeable lag - History search: Fast even with large history files - Multiline editing: Smooth for inputs up to hundreds of lines</p>"},{"location":"reference/editing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reference/editing/#common-issues","title":"Common Issues","text":"<p>Completions not working: - Check if completions are enabled (not started with <code>--no-completions</code>) - Verify PATH contains command directories - Check file permissions</p> <p>Syntax highlighting not showing: - Ensure not started with <code>--no-syntax-highlighting</code> - Check terminal color support - Verify theme styles are defined</p> <p>Key bindings not working: - Check terminal emulator key sending - Verify with <code>cjshopt keybind list</code> - Some terminals may not support all key combinations</p> <p>Multiline issues: - Verify multiline is enabled: <code>cjshopt multiline status</code> - Check for terminal compatibility - Ensure terminal width is adequate</p>"},{"location":"reference/editing/#getting-help","title":"Getting Help","text":"<ul> <li>Press <code>F1</code> during input for interactive help</li> <li>Run <code>cjshopt &lt;subcommand&gt; --help</code> for command-specific help</li> <li>Check logs in debug mode</li> <li>Report issues on the CJsShell GitHub repository</li> </ul>"},{"location":"reference/features/","title":"Features Overview","text":""},{"location":"reference/features/#features-overview","title":"Features Overview","text":"<p>CJ's Shell is a POSIX-based interactive shell designed to provide a powerful, fast, and customizable experience with minimal configuration required.</p>"},{"location":"reference/features/#core-features","title":"Core Features","text":""},{"location":"reference/features/#posix-based-scripting","title":"POSIX-Based Scripting","text":"<p>cjsh targets approximately 95% POSIX coverage for scripting so existing shell scripts run as expected while modern conveniences remain available.</p> <ul> <li>Standards-aligned POSIX shell syntax with common bash extensions</li> <li>Compatible with most <code>sh</code>/<code>bash</code> scripts and tooling expectations</li> <li>Backed by 1500+ automated tests that focus on scripting semantics</li> </ul> <p>See Also: POSIX+ Interactive Features for details on the enhancements layered above the core scripting engine.</p>"},{"location":"reference/features/#shell-scripting","title":"Shell Scripting","text":""},{"location":"reference/features/#conditionals","title":"Conditionals","text":"<ul> <li><code>if/elif/else/fi</code> constructs</li> <li><code>test</code>, <code>[</code>, and <code>[[</code> expressions</li> <li>Supports both POSIX and extended test expressions</li> </ul>"},{"location":"reference/features/#loops","title":"Loops","text":"<ul> <li><code>for</code> loops</li> <li><code>while</code> loops</li> <li><code>until</code> loops</li> <li><code>break</code> and <code>continue</code> statements</li> </ul>"},{"location":"reference/features/#functions","title":"Functions","text":"<ul> <li>POSIX-style function definitions</li> <li>Local variables with <code>local</code> command</li> <li>Return codes and <code>return</code> statement</li> </ul>"},{"location":"reference/features/#advanced-features","title":"Advanced Features","text":"<ul> <li>Command substitution with <code>$(...)</code></li> <li>Pipelines and command chaining</li> <li>Redirection (stdin, stdout, stderr)</li> <li>Here-strings and here-documents</li> <li>Background jobs and job control</li> </ul>"},{"location":"reference/features/#interactive-features","title":"Interactive Features","text":"<p>CJ's Shell provides a rich interactive experience powered by the isocline line editor library.</p> <p>See Interactive Editing Guide for complete documentation of all editing features.</p>"},{"location":"reference/features/#line-editing","title":"Line Editing","text":"<p>Advanced text editing capabilities including:</p> <ul> <li>Multiline input with intelligent continuation detection</li> <li>Line numbering (absolute and relative modes)</li> <li>Syntax highlighting in real-time as you type</li> <li>Context-aware tab completion with fuzzy matching</li> <li>Incremental history search (Ctrl+R)</li> <li>Inline hints and completion preview</li> <li>Visible whitespace markers for spotting stray spaces</li> <li>Spell correction for commands and completions</li> <li>Brace matching and auto-insertion</li> <li>Fish-style abbreviations with <code>abbr</code>/<code>unabbr</code> management commands</li> <li>Customizable key bindings (emacs and vi modes)</li> <li>Interactive help (F1 for full key binding cheat sheet)</li> </ul> <p>Configuration: All editing features can be configured via the <code>cjshopt</code> command: </p><pre><code>cjshopt multiline on|off|status                 # Toggle multiline input\ncjshopt multiline-start-lines &lt;count|status&gt;    # Prefill multiline prompts with extra lines\ncjshopt line-numbers &lt;relative|absolute|off|status&gt;\ncjshopt completion-preview on|off|status        # Show completion preview popups\ncjshopt completion-spell on|off|status          # Completion spell correction\ncjshopt completion-case on|off|status           # Case-sensitive matching (default off)\ncjshopt visible-whitespace on|off|status        # Render whitespace markers\ncjshopt hint on|off|status                      # Inline hints\ncjshopt hint-delay &lt;milliseconds|status&gt;        # Delay before showing hints\ncjshopt auto-tab on|off|status                  # Auto-expand unique completions (default off)\ncjshopt keybind profile set emacs               # Select a key binding profile (also supports 'vi')\n</code></pre><p></p> <p>See the Editing Guide for all available options and detailed usage.</p>"},{"location":"reference/features/#smart-directory-navigation","title":"Smart Directory Navigation","text":"<p>Enhanced <code>cd</code> command with intelligent features:</p> <ul> <li>Fuzzy directory matching</li> <li>Directory bookmarks</li> <li>Adjustable bookmark limit with <code>cjshopt set-max-bookmarks</code></li> <li>Blacklist unwanted locations via <code>cjshopt bookmark-blacklist</code></li> <li>Previous directory switching with <code>cd -</code></li> <li>Can be disabled with <code>--no-smart-cd</code> flag</li> </ul>"},{"location":"reference/features/#auto-completion","title":"Auto-completion","text":"<p>Built-in completion system with advanced features:</p> <ul> <li>Command completion from PATH, builtins, aliases, and functions</li> <li>File and directory completion with intelligent quoting</li> <li>Variable completion for shell variables</li> <li>User and hostname completion for ssh, scp, etc.</li> <li>Fuzzy matching for typo tolerance</li> <li>Frequency-based ranking (commonly used items first)</li> <li>Source attribution (shows where completions come from)</li> <li>Spell correction when no exact match is found</li> <li>Configurable case sensitivity</li> </ul> <p>See Editing Guide for detailed completion documentation.</p>"},{"location":"reference/features/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Real-time syntax highlighting as you type with full customization:</p> <ul> <li>Command recognition (valid commands, builtins, errors)</li> <li>String highlighting (single and double quoted)</li> <li>Operator highlighting (pipes, redirections, logical operators)</li> <li>Keyword highlighting (if, then, else, while, for, etc.)</li> <li>Variable highlighting (parameter expansions)</li> <li>Comment highlighting</li> <li>Brace matching (matching pairs highlighted)</li> <li>Customizable color schemes via <code>cjshopt style_def</code></li> </ul> <p>Example style customization: </p><pre><code>cjshopt style_def ic-keyword \"bold blue\"\ncjshopt style_def ic-command \"green\"\ncjshopt style_def ic-error \"bold red\"\ncjshopt style_def ic-string \"#ffaa00\"\n</code></pre><p></p> <p>See Editing Guide for all available styles and customization options.</p>"},{"location":"reference/features/#theming-system","title":"Theming System","text":""},{"location":"reference/features/#custom-theme-dsl","title":"Custom Theme DSL","text":"<p>Proprietary theme scripting language inspired by JSON and Ruby:</p> <ul> <li>Data-oriented and hierarchical</li> <li>Strongly typed</li> <li>Fast evaluation (2-4x faster than alternatives)</li> <li>Theme caching for performance</li> </ul>"},{"location":"reference/features/#prompt-types","title":"Prompt Types","text":"<ul> <li>PS1: Default prompt</li> <li>GIT: Git repository prompt with status information</li> <li>inline_right: Right-aligned prompt elements</li> <li>newline: Multi-line prompt support</li> </ul>"},{"location":"reference/features/#prompt-information-variables","title":"Prompt Information Variables","text":"<p>Extensive set of variables for displaying system information:</p> <ul> <li>User and system info (username, hostname, path)</li> <li>Time and date formatting</li> <li>Git repository status and metrics</li> <li>Language detection (Python, Node.js, Rust, Go, Java, etc.)</li> <li>Container detection (Docker, Podman)</li> <li>System resources (CPU, memory, disk usage)</li> <li>Network information</li> <li>Custom command execution with caching</li> </ul> <p>See the themes documentation for complete variable list.</p>"},{"location":"reference/features/#configuration","title":"Configuration","text":""},{"location":"reference/features/#startup-files","title":"Startup Files","text":"<ul> <li><code>~/.cjprofile</code> - Login configuration and startup flags</li> <li><code>~/.cjshrc</code> - Interactive session configuration</li> <li><code>~/.cjsh_logout</code> - Optional logout script</li> </ul> <p>Note: To load custom themes, use <code>source path/to/theme.cjsh</code> in your <code>~/.cjshrc</code> file or directly at the command line.</p>"},{"location":"reference/features/#configuration-directories","title":"Configuration Directories","text":"<ul> <li><code>~/.cache/cjsh/</code> - Cache directory (history, exec cache)</li> </ul>"},{"location":"reference/features/#runtime-options","title":"Runtime Options","text":"<p>Multiple command-line flags are available to adjust startup behavior:</p> <p>General execution: - <code>--login</code> \u2013 Start in login mode (mirrors <code>-l</code>) - <code>--interactive</code> \u2013 Force interactive behavior even when stdin is not a TTY - <code>--debug</code> \u2013 Enable verbose startup diagnostics - <code>--command=&lt;command&gt;</code> \u2013 Run a single command and exit - <code>--version</code> \u2013 Print version information and exit - <code>--help</code> \u2013 Display the built-in help text</p> <p>Feature toggles: - <code>--minimal</code> \u2013 Disable cjsh-specific features (themes, colors, completions, syntax highlighting,   smart cd, sourcing, startup timers) - <code>--no-themes</code> \u2013 Disable the theme system - <code>--no-colors</code> \u2013 Disable color output - <code>--no-titleline</code> \u2013 Skip dynamic title line updates - <code>--no-source</code> \u2013 Skip sourcing <code>~/.cjshrc</code> - <code>--no-completions</code> \u2013 Disable the completion system - <code>--no-syntax-highlighting</code> \u2013 Disable syntax highlighting - <code>--no-smart-cd</code> \u2013 Use the basic <code>cd</code> implementation - <code>--no-prompt</code> \u2013 Use a minimal <code>#</code> prompt instead of the themed prompt - <code>--no-history-expansion</code> \u2013 Turn off history expansion (<code>!!</code>, <code>!$</code>, etc.) - <code>--show-startup-time</code> \u2013 Print how long startup took - <code>--startup-test</code> \u2013 Enable startup test mode for diagnostics - <code>--secure</code> \u2013 Run in secure mode with additional restrictions</p> <p>See <code>cjsh --help</code> for complete list.</p>"},{"location":"reference/features/#performance","title":"Performance","text":""},{"location":"reference/features/#optimizations","title":"Optimizations","text":"<ul> <li>Compiled with aggressive optimization flags</li> <li>Theme caching to avoid repeated parsing</li> <li>Command lookup caching</li> <li>Prompt variable caching</li> <li>Executable path caching</li> </ul>"},{"location":"reference/features/#benchmarks","title":"Benchmarks","text":"<p>Theme rendering is typically 2-4x faster than popular alternatives like Starship and Powerlevel10k.</p>"},{"location":"reference/features/#development-tools","title":"Development Tools","text":""},{"location":"reference/features/#script-validation","title":"Script Validation","text":"<ul> <li><code>syntax</code> command for checking script syntax</li> <li><code>validate</code> command for command verification</li> <li>Detailed error messages with suggestions</li> </ul>"},{"location":"reference/features/#history-management","title":"History Management","text":"<ul> <li>Persistent command history across sessions</li> <li>Configurable history size with <code>cjshopt set-history-max</code></li> <li>Duplicate suppression (enabled by default)</li> <li>History search and editing</li> <li>Incremental search (Ctrl+R)</li> <li>History expansion (<code>!</code>, <code>!!</code>, <code>!$</code>, <code>!-1</code>, etc.)</li> <li>History file at <code>~/.cache/cjsh/history.txt</code></li> </ul> <p>See Editing Guide for detailed history features.</p>"},{"location":"reference/features/#debugging-support","title":"Debugging Support","text":"<ul> <li>Detailed error reporting</li> <li>Stack traces for script errors</li> <li>Command timing information</li> </ul>"},{"location":"reference/features/#job-control","title":"Job Control","text":"<p>Full job control support: - Background jobs with <code>&amp;</code> - Job listing with <code>jobs</code> - Foreground/background switching with <code>fg</code>/<code>bg</code> - Job waiting with <code>wait</code> - Signal sending with <code>kill</code> - Proper signal handling with <code>trap</code></p>"},{"location":"reference/features/#security","title":"Security","text":""},{"location":"reference/features/#secure-mode","title":"Secure Mode","text":"<p>When enabled with <code>--secure</code>: - Restricts certain operations - Prevents sourcing untrusted files - Additional safety checks</p>"},{"location":"reference/features/#read-only-variables","title":"Read-only Variables","text":"<p>Support for marking variables as read-only to prevent modification.</p>"},{"location":"reference/features/#platform-support","title":"Platform Support","text":""},{"location":"reference/features/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Linux (all major distributions)</li> <li>macOS</li> <li>Windows with WSL (Windows Subsystem for Linux)</li> <li>Other *nix systems</li> </ul>"},{"location":"reference/features/#requirements","title":"Requirements","text":"<ul> <li>C++17 compatible compiler</li> <li>POSIX-compatible environment</li> <li>Terminal with color support (recommended)</li> </ul>"},{"location":"reference/features/#installation-methods","title":"Installation Methods","text":""},{"location":"reference/features/#package-manager-recommended","title":"Package Manager (Recommended)","text":""},{"location":"reference/features/#homebrew-macoslinux","title":"Homebrew (macOS/Linux)","text":"<pre><code>brew tap CadenFinley/tap\nbrew install cjsh\n</code></pre>"},{"location":"reference/features/#arch-linux-aur","title":"Arch Linux (AUR)","text":"<pre><code># Using yay\nyay -S cjsh\n\n# Using paru\nparu -S cjsh\n\n# Or manually\ngit clone https://aur.archlinux.org/cjsh.git\ncd cjsh\nmakepkg -si\n</code></pre>"},{"location":"reference/features/#manual-build","title":"Manual Build","text":"<pre><code>git clone https://github.com/CadenFinley/CJsShell.git\ncd CJsShell\ncmake -S . -B build -DCMAKE_BUILD_TYPE=Release\ncmake --build build --config Release --parallel\n</code></pre> <p>See the Quick Start guide for detailed installation instructions.</p>"},{"location":"reference/hooks/","title":"Hooks","text":""},{"location":"reference/hooks/#shell-hooks","title":"Shell Hooks","text":"<p>CJ's Shell provides a lightweight hook system that allows you to execute custom shell functions at key points in the shell's lifecycle. This is similar to Zsh's hook system and enables powerful customizations without modifying the shell's core code.</p>"},{"location":"reference/hooks/#available-hook-types","title":"Available Hook Types","text":""},{"location":"reference/hooks/#precmd","title":"<code>precmd</code>","text":"<p>Executed before the prompt is displayed, after the previous command has completed.</p> <p>Use cases: - Update dynamic prompt elements - Display custom information before each prompt - Log command execution times - Update terminal title</p> <p>Example: </p><pre><code>function my_precmd() {\n    echo \"Last command finished at $(date)\"\n}\nhook add precmd my_precmd\n</code></pre><p></p>"},{"location":"reference/hooks/#preexec","title":"<code>preexec</code>","text":"<p>Executed after you press Enter but before the command is actually executed.</p> <p>Use cases: - Log commands before execution - Display command start time - Validate commands before running - Send notifications for long-running commands</p> <p>Example: </p><pre><code>function my_preexec() {\n    echo \"About to execute command...\"\n}\nhook add preexec my_preexec\n</code></pre><p></p>"},{"location":"reference/hooks/#chpwd","title":"<code>chpwd</code>","text":"<p>Executed after successfully changing directories with the <code>cd</code> command.</p> <p>Use cases: - Automatically activate virtual environments - Display directory-specific information - Update terminal title with current directory - Load directory-specific configurations</p> <p>Example: </p><pre><code>function my_chpwd() {\n    echo \"Changed to: $PWD\"\n    # Auto-activate Python virtual environment if it exists\n    if [ -f \".venv/bin/activate\" ]; then\n        source .venv/bin/activate\n    fi\n}\nhook add chpwd my_chpwd\n</code></pre><p></p>"},{"location":"reference/hooks/#hook-management-commands","title":"Hook Management Commands","text":""},{"location":"reference/hooks/#register-a-hook","title":"Register a Hook","text":"<pre><code>hook add &lt;hook_type&gt; &lt;function_name&gt;\n</code></pre> <p>Registers a shell function to be called at the specified hook point.</p> <p>Example: </p><pre><code>function greet() {\n    echo \"Hello from hook!\"\n}\nhook add precmd greet\n</code></pre><p></p>"},{"location":"reference/hooks/#remove-a-hook","title":"Remove a Hook","text":"<pre><code>hook remove &lt;hook_type&gt; &lt;function_name&gt;\n</code></pre> <p>Unregisters a previously registered hook function.</p> <p>Example: </p><pre><code>hook remove precmd greet\n</code></pre><p></p>"},{"location":"reference/hooks/#list-hooks","title":"List Hooks","text":"<pre><code>hook list [hook_type]\n</code></pre> <p>Lists all registered hooks. If <code>hook_type</code> is specified, only hooks of that type are shown.</p> <p>Examples: </p><pre><code># List all hooks\nhook list\n\n# List only precmd hooks\nhook list precmd\n</code></pre><p></p>"},{"location":"reference/hooks/#clear-all-hooks","title":"Clear All Hooks","text":"<pre><code>hook clear &lt;hook_type&gt;\n</code></pre> <p>Removes all hooks of the specified type.</p> <p>Example: </p><pre><code>hook clear precmd\n</code></pre><p></p>"},{"location":"reference/hooks/#complete-examples","title":"Complete Examples","text":""},{"location":"reference/hooks/#auto-activate-python-virtual-environments","title":"Auto-activate Python Virtual Environments","text":"<pre><code># In ~/.cjshrc\n\nfunction auto_venv() {\n    # Deactivate current venv if exists\n    if [ ! -z \"$VIRTUAL_ENV\" ]; then\n        deactivate 2&gt;/dev/null\n    fi\n\n    # Check for virtual environment in current directory\n    if [ -f \".venv/bin/activate\" ]; then\n        source .venv/bin/activate\n        echo \"\u2713 Activated Python virtual environment\"\n    elif [ -f \"venv/bin/activate\" ]; then\n        source venv/bin/activate\n        echo \"\u2713 Activated Python virtual environment\"\n    fi\n}\n\nhook add chpwd auto_venv\n</code></pre>"},{"location":"reference/hooks/#display-git-status-after-directory-change","title":"Display Git Status After Directory Change","text":"<pre><code># In ~/.cjshrc\n\nfunction git_status_on_cd() {\n    if git rev-parse --is-inside-work-tree &gt; /dev/null 2&gt;&amp;1; then\n        echo \"\"\n        git status -sb\n        echo \"\"\n    fi\n}\n\nhook add chpwd git_status_on_cd\n</code></pre>"},{"location":"reference/hooks/#log-all-commands","title":"Log All Commands","text":"<pre><code># In ~/.cjshrc\n\nfunction log_command() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $PWD\" &gt;&gt; ~/.cjsh_command_log\n}\n\nhook add preexec log_command\n</code></pre>"},{"location":"reference/hooks/#display-command-duration","title":"Display Command Duration","text":"<pre><code># In ~/.cjshrc\n\nfunction command_timer_start() {\n    COMMAND_START_TIME=$(date +%s)\n}\n\nfunction command_timer_end() {\n    if [ ! -z \"$COMMAND_START_TIME\" ]; then\n        local duration=$(($(date +%s) - COMMAND_START_TIME))\n        if [ $duration -gt 5 ]; then\n            echo \"\u23f1 Command took ${duration}s\"\n        fi\n        unset COMMAND_START_TIME\n    fi\n}\n\nhook add preexec command_timer_start\nhook add precmd command_timer_end\n</code></pre>"},{"location":"reference/hooks/#dynamic-terminal-title","title":"Dynamic Terminal Title","text":"<pre><code># In ~/.cjshrc\n\nfunction update_terminal_title() {\n    # Set terminal title to current directory\n    echo -ne \"\\033]0;${PWD/#$HOME/~}\\007\"\n}\n\nhook add precmd update_terminal_title\nhook add chpwd update_terminal_title\n</code></pre>"},{"location":"reference/hooks/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Keep hooks fast: Hooks are executed synchronously and can slow down your shell if they take too long.</p> </li> <li> <p>Handle errors gracefully: Hooks should not exit with error codes that affect subsequent commands.</p> </li> <li> <p>Use functions: Define hooks as shell functions for better organization and reusability.</p> </li> <li> <p>Avoid infinite loops: Be careful with hooks that might trigger themselves (e.g., <code>chpwd</code> that calls <code>cd</code>).</p> </li> <li> <p>Test hooks: Test your hooks in a separate shell session before adding them to <code>~/.cjshrc</code>.</p> </li> <li> <p>Document your hooks: Add comments to your <code>~/.cjshrc</code> explaining what each hook does.</p> </li> </ol>"},{"location":"reference/hooks/#debugging-hooks","title":"Debugging Hooks","text":"<p>To debug hook execution, you can temporarily add debugging output:</p> <pre><code>function my_hook() {\n    echo \"DEBUG: my_hook called\" &gt;&amp;2\n    # Your actual hook code here\n}\n</code></pre> <p>To disable a problematic hook without editing files:</p> <pre><code># In the shell\nhook remove precmd problematic_function\n</code></pre>"},{"location":"reference/hooks/#hook-execution-order","title":"Hook Execution Order","text":"<p>When multiple hooks of the same type are registered, they are executed in the order they were registered:</p> <pre><code>hook add precmd first_function\nhook add precmd second_function\nhook add precmd third_function\n\n# Execution order: first_function, second_function, third_function\n</code></pre>"},{"location":"reference/hooks/#differences-from-zsh-hooks","title":"Differences from Zsh Hooks","text":"<p>CJ's Shell hooks are inspired by Zsh but have some differences:</p> <ul> <li>Simpler API: Uses a single <code>hook</code> command instead of <code>add-zsh-hook</code></li> <li>Fewer hook types: Currently supports only <code>precmd</code>, <code>preexec</code>, and <code>chpwd</code></li> <li>No automatic unhooking: Functions are not automatically removed when undefined</li> <li>Manual management: No automatic hook discovery from function names</li> </ul>"},{"location":"reference/hooks/#configuration-file-example","title":"Configuration File Example","text":"<p>Here's a complete example of hook usage in <code>~/.cjshrc</code>:</p> <pre><code># ~/.cjshrc - CJ's Shell Configuration with Hooks\n\n# Function definitions\nfunction show_git_info() {\n    if git rev-parse --is-inside-work-tree &gt; /dev/null 2&gt;&amp;1; then\n        local branch=$(git branch --show-current)\n        echo \"Git branch: $branch\"\n    fi\n}\n\nfunction greet_directory() {\n    local dir=$(basename \"$PWD\")\n    echo \"\u2192 Entered: $dir\"\n}\n\nfunction check_todos() {\n    if [ -f \"TODO.md\" ]; then\n        echo \"This directory has a TODO.md file\"\n    fi\n}\n\n# Register hooks\nhook add chpwd show_git_info\nhook add chpwd greet_directory\nhook add chpwd check_todos\n\necho \"Hooks loaded successfully\"\n</code></pre>"},{"location":"reference/hooks/#see-also","title":"See Also","text":"<ul> <li>Built-in Commands Reference</li> <li>Configuration Guide</li> <li>Scripting Guide</li> </ul>"},{"location":"reference/non-posix-features/","title":"Non-POSIX Features","text":""},{"location":"reference/non-posix-features/#posix-interactive-features","title":"POSIX+ Interactive Features","text":"<p>CJsShell targets approximately 95% POSIX coverage for scripting while layering modern conveniences and interactive features that extend beyond the formal specification. This document highlights the POSIX+ surface area, the experiences that are intentionally non-POSIX so you know what is different and how to control it.</p>"},{"location":"reference/non-posix-features/#interactive-enhancements-posix","title":"Interactive Enhancements (POSIX+)","text":""},{"location":"reference/non-posix-features/#advanced-prompt-system","title":"Advanced Prompt System","text":"<p>CJsShell includes a sophisticated theming and prompt system that is intentionally non-POSIX:</p>"},{"location":"reference/non-posix-features/#custom-theme-dsl","title":"Custom Theme DSL","text":"<ul> <li>Feature: Proprietary theme scripting language with <code>.cjsh</code> files</li> <li>Location: <code>themes/</code> directory, loaded via <code>source theme.cjsh</code></li> <li>POSIX Alternative: Basic <code>PS1</code>, <code>PS2</code> environment variables</li> <li>Why Non-POSIX: POSIX only specifies basic prompt variables, not theming systems</li> </ul> <pre><code># Example theme syntax (POSIX+)\ntheme_definition {\n  ps1 {\n    segment \"username\" {\n      content \"{USERNAME}@{HOSTNAME}:\"\n      fg \"#5555FF\"\n    }\n  }\n}\n</code></pre>"},{"location":"reference/non-posix-features/#advanced-prompt-variables","title":"Advanced Prompt Variables","text":"<p>CJsShell provides extensive prompt variables beyond POSIX: - Git Integration: <code>{GIT_BRANCH}</code>, <code>{GIT_STATUS}</code>, <code>{GIT_AHEAD}</code>, <code>{GIT_BEHIND}</code> - System Info: <code>{CPU_USAGE}</code>, <code>{MEMORY_USAGE}</code>, <code>{DISK_USAGE}</code> - Language Detection: <code>{PYTHON_VERSION}</code>, <code>{NODE_VERSION}</code>, <code>{RUST_VERSION}</code> - Container Detection: <code>{DOCKER_CONTEXT}</code>, <code>{PODMAN_CONTEXT}</code> - Network Info: <code>{IP_ADDRESS}</code>, <code>{WIFI_SSID}</code></p> <p>POSIX Equivalent: Only <code>PS1</code>, <code>PS2</code>, <code>PS4</code> with basic variables like <code>$PWD</code>, <code>$USER</code></p>"},{"location":"reference/non-posix-features/#syntax-highlighting","title":"Syntax Highlighting","text":""},{"location":"reference/non-posix-features/#real-time-highlighting","title":"Real-time Highlighting","text":"<ul> <li>Feature: Live syntax highlighting as you type</li> <li>Implementation: Custom token classification and ANSI color application</li> <li>POSIX Alternative: None (plain text input only)</li> <li>Configuration: <code>cjshopt style_def &lt;token_type&gt; &lt;style&gt;</code></li> </ul>"},{"location":"reference/non-posix-features/#highlighting-categories-posix","title":"Highlighting Categories (POSIX+)","text":"<pre><code># Configure custom highlighting (POSIX+)\ncjshopt style_def \"unknown-command\" \"bold color=#FF5555\"\ncjshopt style_def \"builtin\" \"color=#FFB86C\"\ncjshopt style_def \"keyword\" \"bold color=#BD93F9\"\n</code></pre>"},{"location":"reference/non-posix-features/#tab-completion-system","title":"Tab Completion System","text":""},{"location":"reference/non-posix-features/#advanced-completion-features","title":"Advanced Completion Features","text":"<ul> <li>Fuzzy Matching: Approximate string matching for commands and files</li> <li>Context-Aware Suggestions: Different completions based on command context</li> <li>Spell Correction: Automatic correction of typos</li> <li>Preview System: Shows completion results before selection</li> </ul> <p>Configuration Commands (POSIX+): </p><pre><code>cjshopt completion-case on|off        # Case sensitivity\ncjshopt completion-spell on|off       # Spell correction\ncjshopt completion-preview on|off     # Preview system\n</code></pre><p></p> <p>POSIX Alternative: Basic filename completion only</p>"},{"location":"reference/non-posix-features/#interactive-line-editing","title":"Interactive Line Editing","text":""},{"location":"reference/non-posix-features/#enhanced-text-editing","title":"Enhanced Text Editing","text":"<ul> <li>Multi-line Input: Automatic line continuation with intelligent indentation</li> <li>Bracket Matching: Automatic bracket, quote, and parentheses matching</li> <li>Smart Indentation: Context-aware indentation in multi-line constructs</li> <li>Line Numbers: Optional line numbering in multi-line mode</li> <li>Visible Whitespace: Optional markers for spaces while editing</li> </ul> <p>Configuration (POSIX+): </p><pre><code>cjshopt multiline on|off              # Multi-line editing\ncjshopt multiline-indent on|off       # Auto-indentation\ncjshopt line-numbers on|off           # Line numbering\ncjshopt visible-whitespace on|off     # Show whitespace markers\n</code></pre><p></p>"},{"location":"reference/non-posix-features/#custom-built-in-commands-posix","title":"Custom Built-in Commands (POSIX+)","text":""},{"location":"reference/non-posix-features/#enhanced-directory-navigation","title":"Enhanced Directory Navigation","text":""},{"location":"reference/non-posix-features/#smart-cd-command","title":"Smart CD Command","text":"<p>When <code>--no-smart-cd</code> is not specified, CJsShell's <code>cd</code> includes: - Fuzzy Directory Matching: Partial directory name completion - Directory Bookmarks: Automatic bookmarking of frequently visited directories - Bookmark Management: <code>cjshopt set-max-bookmarks &lt;number&gt;</code> - Blacklisting: <code>cjshopt bookmark-blacklist add &lt;path&gt;</code></p> <pre><code># These features are POSIX+ (non-POSIX)\ncd doc        # Matches \"documents\" directory\ncd -          # Previous directory (POSIX compliant)\n</code></pre>"},{"location":"reference/non-posix-features/#history-expansion","title":"History Expansion","text":"<p>CJsShell supports bash-style history expansion for interactive convenience:</p>"},{"location":"reference/non-posix-features/#event-designators","title":"Event Designators","text":"<ul> <li><code>!!</code> - Repeat the previous command</li> <li><code>!n</code> - Repeat command number <code>n</code> from history</li> <li><code>!-n</code> - Repeat the command <code>n</code> positions back</li> <li><code>!string</code> - Repeat most recent command starting with <code>string</code></li> <li><code>!?string?</code> - Repeat most recent command containing <code>string</code></li> </ul>"},{"location":"reference/non-posix-features/#word-designators","title":"Word Designators","text":"<ul> <li><code>!$</code> - Last argument of previous command</li> <li><code>!^</code> - First argument of previous command (word 1)</li> <li><code>!*</code> - All arguments of previous command (words 1-n)</li> <li><code>!:n</code> - Argument <code>n</code> of previous command</li> <li><code>!:n-m</code> - Arguments <code>n</code> through <code>m</code> of previous command</li> <li><code>!:n-</code> - Arguments from <code>n</code> to the end</li> </ul>"},{"location":"reference/non-posix-features/#quick-substitution","title":"Quick Substitution","text":"<ul> <li><code>^old^new</code> - Replace <code>old</code> with <code>new</code> in previous command and execute</li> </ul> <pre><code># Examples (POSIX+)\necho hello world\n!!              # Repeats: echo hello world\necho !$         # Expands to: echo world\nls !^           # Uses first arg from previous command\n^hello^goodbye  # Changes hello to goodbye and re-executes\n!echo           # Runs most recent echo command\n</code></pre> <p>Disabling: Use <code>--no-history-expansion</code> flag or disable in minimal mode. Auto-Disabled: History expansion is automatically disabled in: - Script mode (<code>cjsh script.sh</code>) - Command mode (<code>cjsh -c \"command\"</code>) - Piped input (preserves POSIX semantics)</p>"},{"location":"reference/non-posix-features/#configuration-command-cjshopt","title":"Configuration Command (<code>cjshopt</code>)","text":"<p>POSIX+ (Non-POSIX): The <code>cjshopt</code> command provides shell configuration:</p> <pre><code>cjshopt style_def &lt;token&gt; &lt;style&gt;     # Syntax highlighting styles\ncjshopt keybind &lt;action&gt; &lt;key&gt;        # Custom key bindings\ncjshopt generate-profile              # Generate ~/.cjprofile\ncjshopt generate-rc                   # Generate ~/.cjshrc\ncjshopt set-history-max &lt;number&gt;      # History configuration\n</code></pre>"},{"location":"reference/non-posix-features/#development-tools","title":"Development Tools","text":""},{"location":"reference/non-posix-features/#syntax-validation-syntax","title":"Syntax Validation (<code>syntax</code>)","text":"<ul> <li>Feature: Script syntax checking without execution</li> <li>Usage: <code>syntax script.sh</code></li> <li>POSIX Alternative: None (must attempt execution)</li> </ul>"},{"location":"reference/non-posix-features/#command-validation-validate","title":"Command Validation (<code>validate</code>)","text":"<ul> <li>Feature: Verify command existence and syntax</li> <li>Usage: <code>validate command_name</code></li> <li>POSIX Alternative: <code>command -v</code> (basic existence check only)</li> </ul>"},{"location":"reference/non-posix-features/#color-and-visual-features-posix","title":"Color and Visual Features (POSIX+)","text":""},{"location":"reference/non-posix-features/#advanced-color-system","title":"Advanced Color System","text":""},{"location":"reference/non-posix-features/#true-color-support","title":"True Color Support","text":"<ul> <li>24-bit RGB Colors: Full color spectrum support</li> <li>Gradient Text: Text with gradient color effects</li> <li>Color Capability Detection: Automatic terminal color detection</li> <li>Color Environment Variables: <code>COLORTERM</code>, <code>FORCE_COLOR</code> support</li> </ul>"},{"location":"reference/non-posix-features/#bbcode-style-color-markup","title":"BBCode-style Color Markup","text":"<pre><code># POSIX+ color markup in themes\ncontent \"[color=#FF5555]Error[/color]\"\ncontent \"[gradient(#FF0000,#00FF00)]Rainbow Text[/gradient]\"\n</code></pre>"},{"location":"reference/non-posix-features/#terminal-enhancements","title":"Terminal Enhancements","text":""},{"location":"reference/non-posix-features/#window-title-management","title":"Window Title Management","text":"<ul> <li>Dynamic Titles: Automatic terminal title updates</li> <li>Custom Title Formats: Configurable title templates</li> <li>Implementation: Escape sequence injection</li> </ul> <pre><code># POSIX+ terminal title configuration\nterminal_title \"{PATH} - CJsShell\"\n</code></pre>"},{"location":"reference/non-posix-features/#configuration-system-posix","title":"Configuration System (POSIX+)","text":""},{"location":"reference/non-posix-features/#custom-configuration-files","title":"Custom Configuration Files","text":""},{"location":"reference/non-posix-features/#startup-files","title":"Startup Files","text":"<p>Beyond standard POSIX startup files: - <code>~/.cjprofile</code>: Login configuration and startup flags - <code>~/.cjshrc</code>: Interactive session configuration - <code>~/.cjsh_logout</code>: Optional logout script</p> <p>POSIX Equivalent: <code>~/.profile</code>, <code>~/.sh_profile</code> (basic functionality only)</p>"},{"location":"reference/non-posix-features/#runtime-configuration","title":"Runtime Configuration","text":"<ul> <li><code>~/.cache/cjsh/</code>: Cache directory for performance optimization</li> <li>Executable Cache: Cached PATH command lookups</li> <li>History Management: Enhanced history with size limits</li> <li>Bookmark Database: Persistent directory bookmarks</li> </ul>"},{"location":"reference/non-posix-features/#command-line-flags-posix-extensions","title":"Command-Line Flags (POSIX+ Extensions)","text":"<pre><code># Shell customization flags (POSIX+)\ncjsh --no-themes              # Disable theme system\ncjsh --no-colors              # Disable color output  \ncjsh --no-syntax-highlighting # Disable syntax highlighting\ncjsh --no-completions         # Disable completion system\ncjsh --no-smart-cd            # Use basic cd implementation\ncjsh --minimal                # Minimal mode\ncjsh --secure                 # Secure mode\n</code></pre>"},{"location":"reference/non-posix-features/#performance-features-posix","title":"Performance Features (POSIX+)","text":""},{"location":"reference/non-posix-features/#caching-systems","title":"Caching Systems","text":"<ul> <li>Command Lookup Cache: Cached executable path resolution</li> <li>Theme Cache: Parsed theme caching for performance</li> <li>History Optimization: Efficient history file management</li> <li>Variable Caching: Prompt variable caching</li> </ul>"},{"location":"reference/non-posix-features/#background-processing","title":"Background Processing","text":"<ul> <li>Asynchronous Operations: Non-blocking operations where possible</li> <li>Lazy Loading: Deferred initialization of non-essential features</li> </ul>"},{"location":"reference/non-posix-features/#extended-scripting-features","title":"Extended Scripting Features","text":""},{"location":"reference/non-posix-features/#bash-like-extensions-posix","title":"Bash-like Extensions (POSIX+)","text":"<p>While maintaining POSIX compatibility, CJsShell supports some bash extensions:</p>"},{"location":"reference/non-posix-features/#extended-test-expressions","title":"Extended Test Expressions","text":"<pre><code># Bash-style extended tests (POSIX+)\n[[ $var =~ regex ]]          # Pattern matching\n[[ -v variable ]]            # Variable existence test\n</code></pre>"},{"location":"reference/non-posix-features/#process-substitution-limited","title":"Process Substitution (Limited)","text":"<ul> <li>Note: Marked as non-POSIX in test suite</li> <li>Usage: Limited support for <code>&lt;(command)</code> syntax</li> </ul>"},{"location":"reference/non-posix-features/#here-strings-posix","title":"Here Strings (POSIX+)","text":"<pre><code># Here strings (bash extension, POSIX+)\ncommand &lt;&lt;&lt; \"string\"\n</code></pre>"},{"location":"reference/non-posix-features/#compliance-notes","title":"Compliance Notes","text":""},{"location":"reference/non-posix-features/#posix-compliance-testing","title":"POSIX Compliance Testing","text":"<p>CJsShell includes over 1500 POSIX-focused tests that verify: - Standard shell scripting syntax - Built-in command behavior - Variable expansion - Job control - Signal handling</p>"},{"location":"reference/non-posix-features/#compatibility-modes","title":"Compatibility Modes","text":"<ul> <li><code>-c</code> Flag: Preserves POSIX semantics for script execution</li> <li>Piped Input: Automatic POSIX mode when shell receives piped input</li> <li>Script Mode: Non-interactive mode maintains strict POSIX behavior</li> </ul>"},{"location":"reference/non-posix-features/#disabling-posix-features","title":"Disabling POSIX+ Features","text":"<p>Most POSIX+ features can be disabled for strict compatibility:</p> <pre><code># Run in a standards-aligned mode\ncjsh --minimal --no-themes --no-colors --no-syntax-highlighting \\\n     --no-completions --no-smart-cd\n</code></pre>"},{"location":"reference/non-posix-features/#summary","title":"Summary","text":"<p>CJsShell's POSIX+ features focus on enhancing the interactive shell experience while maintaining strong POSIX compatibility for scripting. The design philosophy allows users to benefit from modern shell conveniences in interactive use while ensuring scripts remain portable and standards-compliant.</p> <p>Key POSIX+ Areas: 1. Interactive Features: Theming, syntax highlighting, advanced completion 2. Enhanced Built-ins: Smart cd, cjshopt configuration 3. Visual Enhancements: Colors, gradients, terminal title management 4. Development Tools: Syntax validation, command validation 5. Configuration System: Custom config files and runtime options</p> <p>All POSIX+ features are designed to be non-intrusive to POSIX scripting behavior and can be disabled when strict standards adherence is required.</p>"},{"location":"scripting/guide/","title":"Scripting Guide","text":""},{"location":"scripting/guide/#shell-scripting-guide","title":"Shell Scripting Guide","text":"<p>CJ's Shell supports comprehensive shell scripting with a POSIX-based core and optional bash-like extensions. This guide covers the essential scripting features.</p>"},{"location":"scripting/guide/#script-basics","title":"Script Basics","text":""},{"location":"scripting/guide/#shebang","title":"Shebang","text":"<p>Start your scripts with a shebang to specify the interpreter:</p> <pre><code>#!/usr/bin/env cjsh\n</code></pre> <p>Or for POSIX compatibility: </p><pre><code>#!/bin/sh\n</code></pre><p></p>"},{"location":"scripting/guide/#making-scripts-executable","title":"Making Scripts Executable","text":"<pre><code>chmod +x script.sh\n./script.sh\n</code></pre>"},{"location":"scripting/guide/#running-scripts","title":"Running Scripts","text":"<pre><code># Execute in a subshell\ncjsh script.sh\n\n# Source in current shell (preserves variables and aliases)\nsource script.sh\n. script.sh\n</code></pre>"},{"location":"scripting/guide/#variables","title":"Variables","text":""},{"location":"scripting/guide/#variable-assignment","title":"Variable Assignment","text":"<pre><code>name=\"value\"\nnumber=42\npath=\"/usr/local/bin\"\n</code></pre> <p>Note: No spaces around the <code>=</code> sign.</p>"},{"location":"scripting/guide/#variable-expansion","title":"Variable Expansion","text":"<pre><code>echo \"$name\"\necho \"${name}\"  # Preferred for clarity\necho \"Hello, $name!\"\n</code></pre>"},{"location":"scripting/guide/#special-variables","title":"Special Variables","text":"<pre><code>$0    # Script name\n$1-$9 # Positional parameters\n$@    # All positional parameters (as separate words)\n$*    # All positional parameters (as single word)\n$#    # Number of positional parameters\n$?    # Exit status of last command\n$$    # Process ID of current shell\n$!    # Process ID of last background command\n</code></pre>"},{"location":"scripting/guide/#environment-variables","title":"Environment Variables","text":"<pre><code># Export to make available to child processes\nexport PATH=\"/usr/local/bin:$PATH\"\nexport MY_VAR=\"value\"\n\n# Set and export in one line\nexport NEW_VAR=\"value\"\n\n# Remove variable\nunset MY_VAR\n</code></pre>"},{"location":"scripting/guide/#local-variables-in-functions","title":"Local Variables (in functions)","text":"<pre><code>function my_func() {\n    local temp=\"temporary value\"\n    echo \"$temp\"\n}\n</code></pre>"},{"location":"scripting/guide/#read-only-variables","title":"Read-only Variables","text":"<pre><code>readonly PI=3.14159\nreadonly APP_NAME=\"MyApp\"\n</code></pre>"},{"location":"scripting/guide/#conditionals","title":"Conditionals","text":""},{"location":"scripting/guide/#if-statements","title":"if Statements","text":"<pre><code>if [ condition ]; then\n    commands\nfi\n\n# With else\nif [ condition ]; then\n    commands\nelse\n    other_commands\nfi\n\n# With elif\nif [ condition1 ]; then\n    commands1\nelif [ condition2 ]; then\n    commands2\nelse\n    commands3\nfi\n</code></pre>"},{"location":"scripting/guide/#test-expressions","title":"Test Expressions","text":""},{"location":"scripting/guide/#string-tests","title":"String Tests","text":"<pre><code>[ -z \"$str\" ]      # True if string is empty\n[ -n \"$str\" ]      # True if string is not empty\n[ \"$a\" = \"$b\" ]    # True if strings are equal\n[ \"$a\" != \"$b\" ]   # True if strings are not equal\n</code></pre>"},{"location":"scripting/guide/#numeric-tests","title":"Numeric Tests","text":"<pre><code>[ \"$a\" -eq \"$b\" ]  # Equal\n[ \"$a\" -ne \"$b\" ]  # Not equal\n[ \"$a\" -lt \"$b\" ]  # Less than\n[ \"$a\" -le \"$b\" ]  # Less than or equal\n[ \"$a\" -gt \"$b\" ]  # Greater than\n[ \"$a\" -ge \"$b\" ]  # Greater than or equal\n</code></pre>"},{"location":"scripting/guide/#file-tests","title":"File Tests","text":"<pre><code>[ -e file ]   # True if file exists\n[ -f file ]   # True if regular file\n[ -d file ]   # True if directory\n[ -r file ]   # True if readable\n[ -w file ]   # True if writable\n[ -x file ]   # True if executable\n[ -s file ]   # True if file size &gt; 0\n[ -L file ]   # True if symbolic link\n</code></pre>"},{"location":"scripting/guide/#logical-operators","title":"Logical Operators","text":"<pre><code>[ condition1 ] &amp;&amp; [ condition2 ]  # AND\n[ condition1 ] || [ condition2 ]  # OR\n[ ! condition ]                    # NOT\n\n# Within test\n[ condition1 -a condition2 ]  # AND (deprecated, use &amp;&amp; instead)\n[ condition1 -o condition2 ]  # OR (deprecated, use || instead)\n</code></pre>"},{"location":"scripting/guide/#extended-test","title":"Extended Test [[ ]]","text":"<p>Bash-style extended tests (not POSIX):</p> <pre><code>[[ $str =~ pattern ]]     # Regex matching\n[[ $str == pattern ]]     # Pattern matching\n[[ $a &lt; $b ]]            # String comparison\n[[ condition1 &amp;&amp; condition2 ]]  # Logical AND\n[[ condition1 || condition2 ]]  # Logical OR\n</code></pre>"},{"location":"scripting/guide/#loops","title":"Loops","text":""},{"location":"scripting/guide/#for-loop","title":"for Loop","text":"<pre><code># Iterate over list\nfor item in one two three; do\n    echo \"$item\"\ndone\n\n# Iterate over files\nfor file in *.txt; do\n    echo \"Processing $file\"\ndone\n\n# C-style for loop (bash extension)\nfor ((i=0; i&lt;10; i++)); do\n    echo \"$i\"\ndone\n</code></pre>"},{"location":"scripting/guide/#while-loop","title":"while Loop","text":"<pre><code>counter=0\nwhile [ $counter -lt 10 ]; do\n    echo \"$counter\"\n    counter=$((counter + 1))\ndone\n\n# Read file line by line\nwhile IFS= read -r line; do\n    echo \"$line\"\ndone &lt; file.txt\n</code></pre>"},{"location":"scripting/guide/#until-loop","title":"until Loop","text":"<pre><code>counter=0\nuntil [ $counter -ge 10 ]; do\n    echo \"$counter\"\n    counter=$((counter + 1))\ndone\n</code></pre>"},{"location":"scripting/guide/#loop-control","title":"Loop Control","text":"<pre><code># break - Exit loop\nfor i in 1 2 3 4 5; do\n    if [ $i -eq 3 ]; then\n        break\n    fi\n    echo \"$i\"\ndone\n\n# continue - Skip to next iteration\nfor i in 1 2 3 4 5; do\n    if [ $i -eq 3 ]; then\n        continue\n    fi\n    echo \"$i\"\ndone\n</code></pre>"},{"location":"scripting/guide/#functions","title":"Functions","text":""},{"location":"scripting/guide/#function-definition","title":"Function Definition","text":"<pre><code># Method 1 (POSIX)\nfunction_name() {\n    commands\n}\n\n# Method 2 (bash-style)\nfunction function_name() {\n    commands\n}\n</code></pre>"},{"location":"scripting/guide/#function-parameters","title":"Function Parameters","text":"<pre><code>greet() {\n    local name=\"$1\"\n    local greeting=\"${2:-Hello}\"  # Default value\n    echo \"$greeting, $name!\"\n}\n\ngreet \"Alice\"              # Hello, Alice!\ngreet \"Bob\" \"Hi\"           # Hi, Bob!\n</code></pre>"},{"location":"scripting/guide/#return-values","title":"Return Values","text":"<pre><code>is_valid() {\n    if [ -f \"$1\" ]; then\n        return 0  # Success\n    else\n        return 1  # Failure\n    fi\n}\n\n# Use in condition\nif is_valid \"myfile.txt\"; then\n    echo \"File is valid\"\nfi\n</code></pre>"},{"location":"scripting/guide/#capturing-output","title":"Capturing Output","text":"<pre><code>get_timestamp() {\n    date +%Y-%m-%d\n}\n\ntimestamp=$(get_timestamp)\necho \"Current date: $timestamp\"\n</code></pre>"},{"location":"scripting/guide/#command-substitution","title":"Command Substitution","text":""},{"location":"scripting/guide/#modern-syntax","title":"Modern Syntax","text":"<pre><code>result=$(command)\nfiles=$(ls -l)\ncurrent_dir=$(pwd)\n</code></pre>"},{"location":"scripting/guide/#nested-substitution","title":"Nested Substitution","text":"<pre><code>outer=$(echo \"Inner: $(date)\")\n</code></pre>"},{"location":"scripting/guide/#arithmetic","title":"Arithmetic","text":""},{"location":"scripting/guide/#integer-arithmetic","title":"Integer Arithmetic","text":"<pre><code># Using $(( ))\nresult=$((5 + 3))\nsum=$((a + b))\nproduct=$((a * b))\ndivision=$((a / b))\nmodulo=$((a % b))\n\n# Increment/Decrement\ncount=$((count + 1))\ncount=$((count - 1))\n\n# Using expr (older style)\nresult=$(expr 5 + 3)\n</code></pre>"},{"location":"scripting/guide/#common-operations","title":"Common Operations","text":"<pre><code># Assignment with arithmetic\n((count++))\n((count--))\n((count += 5))\n((count *= 2))\n\n# Comparisons in arithmetic context\nif ((a &gt; b)); then\n    echo \"a is greater\"\nfi\n</code></pre>"},{"location":"scripting/guide/#inputoutput","title":"Input/Output","text":""},{"location":"scripting/guide/#reading-input","title":"Reading Input","text":"<pre><code># Read single variable\nread name\necho \"Hello, $name\"\n\n# Read multiple variables\nread first last\necho \"Name: $first $last\"\n\n# With prompt\nread -p \"Enter your name: \" name\n\n# Read into array\nread -a array\necho \"${array[0]}\"\n\n# Read with timeout (bash extension)\nread -t 5 -p \"Enter within 5 seconds: \" input\n</code></pre>"},{"location":"scripting/guide/#printing-output","title":"Printing Output","text":"<pre><code># echo\necho \"Hello, World\"\necho -n \"No newline\"\necho -e \"Enable\\tescapes\\nhere\"\n\n# printf (more portable)\nprintf \"Name: %s\\n\" \"$name\"\nprintf \"Number: %d\\n\" 42\nprintf \"Float: %.2f\\n\" 3.14159\nprintf \"%-10s %5d\\n\" \"Item\" 123\n</code></pre>"},{"location":"scripting/guide/#redirection","title":"Redirection","text":""},{"location":"scripting/guide/#output-redirection","title":"Output Redirection","text":"<pre><code>command &gt; file           # Redirect stdout, overwrite\ncommand &gt;&gt; file          # Redirect stdout, append\ncommand 2&gt; file          # Redirect stderr\ncommand &amp;&gt; file          # Redirect both stdout and stderr\ncommand 2&gt;&amp;1             # Redirect stderr to stdout\ncommand &gt; file 2&gt;&amp;1      # Redirect both to file\n</code></pre>"},{"location":"scripting/guide/#input-redirection","title":"Input Redirection","text":"<pre><code>command &lt; file           # Read from file\ncommand &lt;&lt; EOF           # Here-document\nmulti-line\ninput\nEOF\n\ncommand &lt;&lt;&lt; \"string\"     # Here-string\n</code></pre>"},{"location":"scripting/guide/#file-descriptors","title":"File Descriptors","text":"<pre><code>exec 3&lt; input.txt        # Open file for reading\nexec 4&gt; output.txt       # Open file for writing\nread -u 3 line           # Read from fd 3\necho \"text\" &gt;&amp;4          # Write to fd 4\nexec 3&lt;&amp;-                # Close fd 3\nexec 4&gt;&amp;-                # Close fd 4\n</code></pre>"},{"location":"scripting/guide/#pipelines","title":"Pipelines","text":""},{"location":"scripting/guide/#basic-pipelines","title":"Basic Pipelines","text":"<pre><code>command1 | command2\nls -l | grep \".txt\" | wc -l\n</code></pre>"},{"location":"scripting/guide/#pipeline-status","title":"Pipeline Status","text":"<pre><code># Exit status is from last command\nls | grep \"pattern\"\necho $?  # Status from grep\n\n# Get status of all pipeline commands\nls | grep \"pattern\"\necho \"${PIPESTATUS[@]}\"  # bash extension\n</code></pre>"},{"location":"scripting/guide/#case-statements","title":"Case Statements","text":"<pre><code>case \"$variable\" in\n    pattern1)\n        commands1\n        ;;\n    pattern2|pattern3)\n        commands2\n        ;;\n    *)\n        default_commands\n        ;;\nesac\n</code></pre>"},{"location":"scripting/guide/#example","title":"Example","text":"<pre><code>case \"$1\" in\n    start)\n        echo \"Starting...\"\n        ;;\n    stop)\n        echo \"Stopping...\"\n        ;;\n    restart)\n        echo \"Restarting...\"\n        ;;\n    *)\n        echo \"Usage: $0 {start|stop|restart}\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"scripting/guide/#error-handling","title":"Error Handling","text":""},{"location":"scripting/guide/#exit-on-error","title":"Exit on Error","text":"<pre><code>set -e  # Exit immediately if command fails\nset -u  # Exit if undefined variable is used\nset -o pipefail  # Pipeline fails if any command fails\n\n# Combine\nset -euo pipefail\n</code></pre>"},{"location":"scripting/guide/#custom-error-handling","title":"Custom Error Handling","text":"<pre><code>command || {\n    echo \"Command failed\" &gt;&amp;2\n    exit 1\n}\n\nif ! command; then\n    echo \"Error occurred\"\n    exit 1\nfi\n</code></pre>"},{"location":"scripting/guide/#trap-for-cleanup","title":"Trap for Cleanup","text":"<pre><code>cleanup() {\n    echo \"Cleaning up...\"\n    rm -f temp_file\n}\n\ntrap cleanup EXIT\ntrap 'echo \"Interrupted\"; exit 1' INT TERM\n</code></pre>"},{"location":"scripting/guide/#arrays-bash-extension","title":"Arrays (bash extension)","text":""},{"location":"scripting/guide/#array-creation","title":"Array Creation","text":"<pre><code>array=(one two three)\narray[0]=\"first\"\n</code></pre>"},{"location":"scripting/guide/#array-access","title":"Array Access","text":"<pre><code>echo \"${array[0]}\"        # First element\necho \"${array[@]}\"        # All elements\necho \"${#array[@]}\"       # Array length\necho \"${array[*]}\"        # All elements as single word\n</code></pre>"},{"location":"scripting/guide/#array-iteration","title":"Array Iteration","text":"<pre><code>for item in \"${array[@]}\"; do\n    echo \"$item\"\ndone\n</code></pre>"},{"location":"scripting/guide/#best-practices","title":"Best Practices","text":""},{"location":"scripting/guide/#quoting","title":"Quoting","text":"<pre><code># Always quote variables\necho \"$variable\"\ncommand \"$file_name\"\n\n# Quote to preserve whitespace\nfor file in \"$@\"; do\n    echo \"$file\"\ndone\n</code></pre>"},{"location":"scripting/guide/#script-template","title":"Script Template","text":"<pre><code>#!/usr/bin/env cjsh\n\n# Script description\n# Author: Your Name\n# Date: YYYY-MM-DD\n\nset -euo pipefail\n\n# Constants\nreadonly SCRIPT_DIR=\"$(cd \"$(dirname \"$0\")\" &amp;&amp; pwd)\"\nreadonly SCRIPT_NAME=\"$(basename \"$0\")\"\n\n# Functions\nusage() {\n    cat &lt;&lt; EOF\nUsage: $SCRIPT_NAME [options] arguments\n\nDescription of script\n\nOptions:\n    -h, --help      Show this help message\n    -v, --verbose   Enable verbose output\n\nExamples:\n    $SCRIPT_NAME file.txt\nEOF\n}\n\nmain() {\n    # Main script logic\n    echo \"Script started\"\n}\n\n# Parse arguments\nwhile [ $# -gt 0 ]; do\n    case \"$1\" in\n        -h|--help)\n            usage\n            exit 0\n            ;;\n        -v|--verbose)\n            VERBOSE=1\n            shift\n            ;;\n        *)\n            break\n            ;;\n    esac\ndone\n\n# Run main\nmain \"$@\"\n</code></pre>"},{"location":"scripting/guide/#debugging","title":"Debugging","text":"<pre><code># Enable debugging output\nset -x  # Print commands before execution\n\n# Debug specific section\nset -x\ncommands_to_debug\nset +x\n\n# Use in script\n#!/usr/bin/env cjsh -x\n</code></pre>"},{"location":"scripting/guide/#validation","title":"Validation","text":"<pre><code># Use syntax command to check script\ncjsh syntax script.sh\n\n# Check for specific commands\ncjsh validate command_name\n</code></pre>"},{"location":"scripting/guide/#common-patterns","title":"Common Patterns","text":""},{"location":"scripting/guide/#argument-parsing","title":"Argument Parsing","text":"<pre><code>while getopts \"hvf:\" opt; do\n    case \"$opt\" in\n        h) usage; exit 0 ;;\n        v) VERBOSE=1 ;;\n        f) FILE=\"$OPTARG\" ;;\n        *) usage; exit 1 ;;\n    esac\ndone\nshift $((OPTIND - 1))\n</code></pre>"},{"location":"scripting/guide/#file-processing","title":"File Processing","text":"<pre><code>while IFS= read -r line; do\n    # Process each line\n    echo \"Line: $line\"\ndone &lt; input.txt\n</code></pre>"},{"location":"scripting/guide/#temporary-files","title":"Temporary Files","text":"<pre><code>tmpfile=$(mktemp)\ntrap \"rm -f '$tmpfile'\" EXIT\n\n# Use tmpfile\necho \"data\" &gt; \"$tmpfile\"\n</code></pre>"},{"location":"scripting/guide/#default-values","title":"Default Values","text":"<pre><code># Use default if variable is unset\nname=\"${name:-default}\"\n\n# Set default if variable is unset\n: \"${name:=default}\"\n\n# Error if variable is unset\n: \"${name:?Error: name is required}\"\n</code></pre>"},{"location":"scripting/guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>See <code>help</code> command for built-in command reference</li> <li>Use <code>man test</code> for detailed test expression documentation</li> <li>Check POSIX specification for portable scripting</li> <li>Run <code>./tests/run_shell_tests.sh</code> to see example test scripts</li> </ul>"},{"location":"themes/thedetails/","title":"The Details","text":""},{"location":"themes/thedetails/#themes","title":"Themes","text":"<p>Programming and designing themes uses its own proprietary cjsh DSL language inspired by json and ruby. I know, it's cursed, but it works, it's pretty flexible and fairly easy to write and I'm stuck with it so yeah. Themes are data oriented, hierarchical, and strongly typed. Upon loading a theme, the theme is stored in a theme cache to avoid repeated file reads for themes. Also many prompt info variables are cached to avoid repeated unneeded calculations and executions for information. Any and all white space defined in content areas or in conditionals is rendered in the main prompt output. Frequently I brag about my themes being 2-4 times faster than starship and powerlevel10k at fastest, but you do have to create the themes in a crappy, custom scripting language so there are trade offs. </p>"},{"location":"themes/thedetails/#loading-themes","title":"Loading Themes","text":"<p>To load a theme file, use the <code>source</code> command:</p> <pre><code>source path/to/theme.cjsh\n</code></pre> <p>For automatic loading on shell startup, add the source command to your <code>~/.cjshrc</code> file:</p> <pre><code># In ~/.cjshrc\nsource ~/mythemes/gruvbox_dark.cjsh\n</code></pre> <p>Alternatively, theme definitions inlined in .cjshrc will be automatically loaded</p> <p>Theme files included with cjsh can be found in the <code>themes/</code> directory of the repository.</p>"},{"location":"themes/thedetails/#theme-definition","title":"Theme Definition","text":"<p>Themes are started with a beginning structure:</p> <pre><code>theme_definition [optional name] {\n\n}\n</code></pre> <p>Heads up: Comment syntax (for example lines beginning with <code>#</code>) isn't currently supported inside a theme definition. Including comment markers will usually cause the parser to error out.</p>"},{"location":"themes/thedetails/#prompt-definitions-and-theme-structure","title":"Prompt Definitions and Theme Structure","text":"<p>Themes are made up of different prompt types: PS1 and GIT. The PS1 is the default prompt that is used at all times except when within a git repo, at which point the GIT prompt is used. There are two more additional prompts that have special features. Those prompts are the newline and inline_right prompts. It does not matter the order in which each prompt is defined in the theme file. The terminal window title can also be defined here in the theme file.</p> <pre><code>theme_definition \"theme_name\" {\n  variables {\n\n    }\n\n    terminal_title \"\"\n\n    fill {\n\n    }\n\n    ps1 {\n\n    }\n\n    git {\n\n    }\n\n    inline_right {\n\n    }\n\n    newline {\n\n    }\n\n    behavior {\n\n    }\n\n}\n</code></pre>"},{"location":"themes/thedetails/#theme-variables","title":"Theme Variables","text":"<p>Then structure and behaviors are designed inside. Variables can be used to define commonly used characters, colors, conditional structures, and prompt segments. Comments are not supported anywhere in theme files right now, so avoid adding <code>#</code> or other comment-like markers.</p> <pre><code>variables {\n    project_type_bg \"{if = {IS_PYTHON_PROJECT} == 'true' ? #504945 : {if = {IS_NODEJS_PROJECT} == 'true' ? #504945 : {if = {IS_RUST_PROJECT} == 'true' ? #504945 : {if = {IS_GOLANG_PROJECT} == 'true' ? #504945 : {if = {IS_JAVA_PROJECT} == 'true' ? #504945 : {if = {IS_CPP_PROJECT} == 'true' ? #504945 : {if = {IS_CSHARP_PROJECT} == 'true' ? #504945 : {if = {IS_PHP_PROJECT} == 'true' ? #504945 : {if = {IS_RUBY_PROJECT} == 'true' ? #504945 : {if = {IS_KOTLIN_PROJECT} == 'true' ? #504945 : {if = {IS_SWIFT_PROJECT} == 'true' ? #504945 : {if = {IS_DART_PROJECT} == 'true' ? #504945 : {if = {IS_SCALA_PROJECT} == 'true' ? #504945 : #665c54}}}}}}}}}}}}}\"\n    project_language_badge \" {if = {IS_PYTHON_PROJECT} == 'true' ?\ud83d\udc0d {PYTHON_VERSION} :}{if = {IS_NODEJS_PROJECT} == 'true' ?\u26a1 {NODEJS_VERSION} :}{if = {IS_RUST_PROJECT} == 'true' ?\ud83e\udd80 {RUST_VERSION} :}{if = {IS_GOLANG_PROJECT} == 'true' ?\ud83d\udc39 {GOLANG_VERSION} :}{if = {IS_JAVA_PROJECT} == 'true' ?\u2615 {JAVA_VERSION} :}{if = {IS_CPP_PROJECT} == 'true' ?\u2699\ufe0f {CPP_VERSION} :}{if = {IS_CSHARP_PROJECT} == 'true' ?\ud83d\udd37 {CSHARP_VERSION} :}{if = {IS_PHP_PROJECT} == 'true' ?\ud83d\udc18 {PHP_VERSION} :}{if = {IS_RUBY_PROJECT} == 'true' ?\ud83d\udc8e {RUBY_VERSION} :}{if = {IS_KOTLIN_PROJECT} == 'true' ?\ud83c\udfaf {KOTLIN_VERSION} :}{if = {IS_SWIFT_PROJECT} == 'true' ?\ud83e\udd89 {SWIFT_VERSION} :}{if = {IS_DART_PROJECT} == 'true' ?\ud83c\udfaf {DART_VERSION} :}{if = {IS_SCALA_PROJECT} == 'true' ?\ud83d\udcc8 {SCALA_VERSION} :}\"\n\n    segment \"shared_user_segment\" {\n      content \" {USERNAME} \"\n      fg \"#ebdbb2\"\n      bg \"#282828\"\n      separator \"\\uE0B0\"\n      separator_fg \"#282828\"\n      separator_bg \"#3c3836\"\n      forward_separator \"\\uE0B6\"\n      forward_separator_fg \"#282828\"\n      forward_separator_bg RESET\n      alignment \"left\"\n    }\n\n    segment \"shared_status_segment\" {\n      content \" [{STATUS}]\"\n      fg \"{if = {STATUS} == 0 ? #b8bb26 : #fb4934}\"\n      bg \"#3c3836\"\n      separator \"\\uE0B0\"\n      separator_fg \"#3c3836\"\n      separator_bg \"#3c3836\"\n      alignment \"left\"\n    }\n\n    segment \"shared_duration_segment\" {\n      content \"in {CMD_DURATION} \"\n      fg \"#ebdbb2\"\n      bg \"#3c3836\"\n      separator \"\\uE0B0\"\n      separator_fg \"#3c3836\"\n      separator_bg RESET\n      alignment \"left\"\n    }\n\n    segment \"shared_language_badge_segment\" {\n      content \"${project_language_badge}\"\n      fg \"#83a598\"\n      bg \"#504945\"\n      separator \"\\uE0B0\"\n      separator_fg \"#504945\"\n      separator_bg \"#665c54\"\n      alignment \"left\"\n    }\n  }\n</code></pre> <p>And can be used in a segment like this:</p> <pre><code>use_segment \"shared_user_segment\" as \"userseg\"\n</code></pre>"},{"location":"themes/thedetails/#theme-segment-behaviors","title":"Theme Segment behaviors","text":"<p>Segments use a tag system to that certain segments can be separated from the main prompt and can have their own behaviors defined only for a given tag. One prompt may have many different segments that make up its self. Segments are evaluated and rendered by hierarchical definition from top to bottom as defined in the prompt definition.</p> <p>Here is an example of all available segment behaviors being used:</p> <pre><code>segment \"user_segment\" {\n      content \" {USERNAME} \"\n      fg \"#d3869b\"\n      bg \"#282828\"\n      separator \"\\uE0B0\"\n      separator_fg \"#282828\"\n      separator_bg \"#3c3836\"\n      forward_separator \"\\uE0B6\"\n      forward_separator_fg \"#282828\"\n      forward_separator_bg RESET\n      alignment \"left\"\n      bold true\n      italic false\n      underline false\n      dim false\n      strikethrough false\n    }\n</code></pre> <p>The separator is the separator to the right of the content and the forward separator is the one to the left. The alignment value allows the prompt to be anchored to a given side of the screen, center, left, or right. This placement will dynamically scale with terminal window size.</p>"},{"location":"themes/thedetails/#text-style-properties","title":"Text Style Properties","text":"<p>Segments support text styling properties;xw</p> <ul> <li><code>bold</code> - Makes text bold/thicker (values: <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, <code>1</code>, <code>0</code>)</li> <li><code>italic</code> - Renders text in italics (values: <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, <code>1</code>, <code>0</code>)</li> <li><code>underline</code> - Underlines the text (values: <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, <code>1</code>, <code>0</code>)</li> <li><code>dim</code> - Renders text with reduced intensity/dimmed (values: <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, <code>1</code>, <code>0</code>)</li> <li><code>strikethrough</code> - Strikes through the text (values: <code>true</code>, <code>false</code>, <code>yes</code>, <code>no</code>, <code>1</code>, <code>0</code>)</li> </ul> <p>All text style properties are optional and default to <code>false</code>. Multiple styles can be combined on the same segment. For example:</p> <pre><code>segment \"emphasized_segment\" {\n      content \" IMPORTANT \"\n      fg \"#ff0000\"\n      bg \"#000000\"\n      bold true\n      underline true\n      alignment \"left\"\n    }\n\nsegment \"subtle_segment\" {\n      content \" (optional) \"\n      fg \"#888888\"\n      bg \"RESET\"\n      dim true\n      italic true\n      alignment \"left\"\n    }\n</code></pre> <p>Note: Text style support depends on your terminal emulator. Most modern terminals support bold, italic, underline, and dim. Support for strikethrough varies by terminal.</p>"},{"location":"themes/thedetails/#theme-behaviors","title":"Theme Behaviors","text":"<p>Theme Behaviors have 3 potential toggles: cleanup, cleanup_empty_line, and newline_after_execution. Cleanup is only able to be used with a newline prompt and it removes the main prompt upon the user pressing enter on input and it will move the newline prompts and all text up to where the main prompt line started. cleanup_empty_line places a newline after the cleanup before execution. newline_after_execution is self-explanatory.</p> <pre><code>behavior {\n    cleanup false\n    cleanup_empty_line false\n    newline_after_execution false\n}\n</code></pre> <p>There is also the fill behavior. It defines what should fill the space in between main prompt alligned segements.</p> <pre><code>  fill {\n    char \" \",\n    fg RESET\n    bg RESET\n  }\n</code></pre>"},{"location":"themes/thedetails/#prompt-information-variables","title":"Prompt Information Variables","text":"<p>The information variables are defined like {VAR_NAME} and will replace the var with the proper information. Some basic vars are: {USERNAME} {HOSTNAME} {PATH} {DIRECTORY} {TIME} Vars can be defined in any content field, and prompt type, conditional, and separator. You can see a comprehensive list at the bottom of this page. Some prompt tags should only be used while within a certain prompt, but you can kind of just put whatever information you want anywhere. Nothing is stopping you. Additionally custom EXEC prompt variables can be defined, see below.</p>"},{"location":"themes/thedetails/#default-cjsh-theme","title":"Default cjsh Theme","text":"<p>Here is what the default cjsh theme looks like and this theme is created upon creation of the .cjshrc file within cjsh:</p> <pre><code>#! usr/bin/env cjsh\n\ntheme_definition {\n  terminal_title \"{PATH}\"\n\n  fill {\n    char \"\",\n    fg RESET\n    bg RESET\n  }\n\n  ps1 {\n    segment \"username\" {\n      content \"{USERNAME}@{HOSTNAME}:\"\n      fg \"#5555FF\"\n      bg \"RESET\"\n    }\n    segment \"directory\" {\n      content \" {DIRECTORY} \"\n      fg \"#55FF55\"\n      bg \"RESET\"\n      separator \" \"\n      separator_fg \"#FFFFFF\"\n      separator_bg \"RESET\"\n    }\n    segment \"prompt\" {\n      content \"$ \"\n      fg \"#FFFFFF\"\n      bg \"RESET\"\n    }\n  }\n\n  git_segments {\n    segment \"path\" {\n      content \" {LOCAL_PATH} \"\n      fg \"#55FF55\"\n      bg \"RESET\"\n      separator \" \"\n      separator_fg \"#FFFFFF\"\n      separator_bg \"RESET\"\n    }\n    segment \"branch\" {\n      content \"{GIT_BRANCH}\"\n      fg \"#FFFF55\"\n      bg \"RESET\"\n    }\n    segment \"status\" {\n      content \"{GIT_STATUS}\"\n      fg \"#FF5555\"\n      bg \"RESET\"\n      separator \" $ \"\n      separator_fg \"#FFFFFF\"\n      separator_bg \"RESET\"\n    }\n  }\n\n  inline_right {\n    segment \"time\" {\n      content \"[{TIME}]\"\n      fg \"#888888\"\n      bg \"RESET\"\n    }\n  }\n\n  behavior {\n    cleanup false\n    cleanup_empty_line false\n    newline_after_execution false\n  }\n}\n</code></pre>"},{"location":"themes/thedetails/#available-prompt-tags","title":"Available Prompt Tags","text":"<pre><code>/*\n * {USERNAME}   - Current user's name\n * {HOSTNAME}   - System hostname\n * {PATH}       - Current working directory (with ~ for home)\n * {DIRECTORY}  - Name of the current directory\n * {TIME12}     - Current time (HH:MM:SS) in 12 hour format\n * {TIME24}, {TIME} - Current time (HH:MM:SS) in 24 hour format\n * {DATE}       - Current date (YYYY-MM-DD)\n * {DAY}        - Current day of the month (1-31)\n * {MONTH}      - Current month (1-12)\n * {YEAR}       - Current year (YYYY)\n * {DAY_NAME}   - Name of the current day (e.g., Monday)\n * {MONTH_NAME} - Name of the current month (e.g., September)\n * {SHELL}      - Name of the shell\n * {SHELL_VER}  - Version of the shell\n *\n * Directory placeholders:\n * {DISPLAY_DIR} - Enhanced directory display with repo/home contraction\n * {TRUNCATED_PATH} - Truncated path with symbol\n * {REPO_PATH}  - Repository-relative path\n * {DIR_TRUNCATED} - Whether directory display is truncated (true/false)\n *\n * Git prompt additional placeholders:\n * {LOCAL_PATH} - Local path of the git repository\n * {GIT_BRANCH} - Current Git branch\n * {GIT_STATUS} - Git status (\u2713 for clean, * for dirty)\n * {GIT_AHEAD}  - Number of commits ahead of remote\n * {GIT_BEHIND} - Number of commits behind remote\n * {GIT_STASHES} - Number of stashes in the repository\n * {GIT_STAGED} - Has staged changes (\u2713 or empty)\n * {GIT_CHANGES} - Number of uncommitted changes\n * {GIT_REMOTE} - Remote URL of the current repo\n * {GIT_TAG} - Current Git tag (if any)\n * {GIT_LAST_COMMIT} - Last commit hash or message\n * {GIT_AUTHOR} - Author of the last commit\n *\n * Command placeholders:\n * {CMD_DURATION} - Duration of last command (formatted)\n * {CMD_DURATION_MS} - Duration of last command in milliseconds\n * {EXIT_CODE}  - Last command exit code\n * {EXIT_SYMBOL} - Exit status symbol (\u2713 for success, \u2717 for failure)\n * {CMD_SUCCESS} - Whether last command was successful (true/false)\n *\n * Language detection placeholders:\n * {PYTHON_VERSION} - Python version if in Python project\n * {NODEJS_VERSION} - Node.js version if in Node.js project\n * {RUST_VERSION} - Rust version if in Rust project\n * {GOLANG_VERSION} - Go version if in Go project\n * {JAVA_VERSION} - Java version if in Java project\n * {LANGUAGE_VERSIONS} - Combined language versions (only shows detected projects) \n * {PYTHON_VENV} - Python virtual environment name \n * {NODEJS_PM} - Node.js package manager (npm, yarn, pnpm) \n * {IS_PYTHON_PROJECT} - Whether current directory is a Python project \n * {IS_NODEJS_PROJECT} - Whether current directory is a Node.js project \n * {IS_RUST_PROJECT} - Whether current directory is a Rust project \n * {IS_GOLANG_PROJECT} - Whether current directory is a Go project \n * {IS_JAVA_PROJECT} - Whether current directory is a Java project\n *\n * Container placeholders:\n * {CONTAINER_NAME} - Name of container (Docker, Podman, etc.)\n * {CONTAINER_TYPE} - Type of container technology\n * {IS_CONTAINER} - Whether running in a container (true/false)\n * {DOCKER_CONTEXT} - Docker context name\n * {DOCKER_IMAGE} - Docker image name if available\n *\n * System information placeholders:\n * {OS_INFO}     - Operating system name and version\n * {KERNEL_VER}  - Kernel version\n * {CPU_USAGE}   - Current CPU usage percentage\n * {MEM_USAGE}   - Current memory usage percentage\n * {BATTERY}     - Battery percentage and charging status\n * {UPTIME}      - System uptime\n * {DISK_USAGE}  - Disk usage of current directory or root\n * {SWAP_USAGE}  - Swap memory usage\n * {LOAD_AVG}    - System load average\n *\n * Environment information placeholders:\n * {TERM_TYPE}   - Terminal type (e.g., xterm, screen)\n * {TERM_SIZE}   - Terminal dimensions (columns x rows)\n * {LANG_VER:X}  - Version of language X (python, node, ruby, go, rust)\n * {VIRTUAL_ENV} - Name of active virtual environment, if any\n * {BG_JOBS}     - Number of background jobs\n * {STATUS}      - Last command exit code\n *\n * Network information placeholders:\n * {IP_LOCAL}    - Local IP address\n * {IP_EXTERNAL} - External IP address\n * {VPN_STATUS}  - VPN connection status (on/off)\n * {NET_IFACE}   - Active network interface\n</code></pre>"},{"location":"themes/thedetails/#command-execution-tags","title":"Command Execution Tags","text":"<p>The shell supports executing arbitrary commands in your prompt with automatic caching:</p> <ul> <li>{EXEC%%%%%%} - Execute a shell command with caching</li> <li><code>command</code>: The shell command to execute</li> <li><code>cache_duration</code>: Cache duration in seconds (optional, defaults to 30)                        Use <code>-1</code> for permanent caching (execute once, cache forever)</li> </ul> <p>Here are some examples:</p> <pre><code># Show current time, cached for 60 seconds\n{EXEC%%%date +%H:%M%%%60}\n\n# Show git commit count, cached for 30 seconds (default)\n{EXEC%%%git rev-list --count HEAD%%%}\n\n# Show battery percentage on macOS, cached for 120 seconds\n{EXEC%%%pmset -g batt | grep -Eo \"\\d+%\" | cut -d% -f1%%%120}\n\n# Show kubernetes context, cached for 10 seconds\n{EXEC%%%kubectl config current-context%%%10}\n\n# Show kernel version, cached permanently (execute only once)\n{EXEC%%%uname -r%%%-1}\n\n# Show hostname, cached permanently\n{EXEC%%%hostname%%%-1}\n</code></pre>"}]}