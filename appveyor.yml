version: '{build}'

# Build only on Linux (Unix-only support)
image:
  - Ubuntu

# Only build the master branch
branches:
  only:
    - master

# Clone depth
clone_depth: 5

# Cache to speed up builds
cache:
  - '$HOME/.ccache'

environment:
  matrix:
    - platform: x64
      configuration: Release
    - platform: x64
      configuration: Debug

install:
  # Linux dependencies
  - sh: |
      echo Installing Linux dependencies...
      sudo apt-get update
      sudo apt-get install -y build-essential cmake
      # Install 32-bit libraries if building for x86
      if [ "$platform" = "x86" ]; then
        chmod +x scripts/linux_build_helper.sh
        sudo ./scripts/linux_build_helper.sh install-32bit
      fi
      # Always use the latest version of nlohmann/json from GitHub
      mkdir -p external/nlohmann
      wget -O external/nlohmann/json.hpp https://github.com/nlohmann/json/releases/download/v3.11.2/json.hpp
      sudo apt-get install -y libcurl4-openssl-dev
      sudo apt-get install -y libssl-dev
      sudo apt-get install -y zlib1g-dev
      # Make sure we have the dynamic loading library
      sudo apt-get install -y libdl-dev || echo "libdl is part of glibc-dev, continuing..."

before_build:
  # Linux build preparation
  - sh: |
      mkdir -p build
      cd build
      if [ "$platform" = "x86" ]; then
        # For 32-bit builds
        export CFLAGS="-m32"
        export CXXFLAGS="-m32"
        # Force the arch to be x86
        cmake .. -DCMAKE_BUILD_TYPE=$configuration -DCMAKE_CXX_FLAGS="-m32" -DCMAKE_C_FLAGS="-m32" -DFORCE_32BIT=ON
      else
        cmake .. -DCMAKE_BUILD_TYPE=$configuration
      fi
      if [ $? -ne 0 ]; then exit 1; fi

build_script:
  # Linux build
  - sh: |
      # Install missing dependencies required by static libcurl
      sudo apt-get update
      sudo apt-get install -y libidn2-dev libpsl-dev libnghttp2-dev libkrb5-dev librtmp-dev libssh2-1-dev libldap2-dev
      
      # Build with proper linking flags
      cmake --build . --config $configuration -- -j $(nproc)
      
      # If the build fails, try with explicit linking
      if [ $? -ne 0 ]; then
        echo "Trying build with explicit dependencies..."
        cd $APPVEYOR_BUILD_FOLDER
        mkdir -p build_retry
        cd build_retry
        if [ "$platform" = "x86" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=$configuration -DCMAKE_CXX_FLAGS="-m32" -DCMAKE_C_FLAGS="-m32" -DFORCE_32BIT=ON \
            -DCMAKE_EXE_LINKER_FLAGS="-lssl -lcrypto -lidn2 -lpsl -lnghttp2 -lgssapi_krb5 -lkrb5 -lk5crypto -lcom_err -lrtmp -lssh2 -lldap"
        else
          cmake .. -DCMAKE_BUILD_TYPE=$configuration \
            -DCMAKE_EXE_LINKER_FLAGS="-lssl -lcrypto -lidn2 -lpsl -lnghttp2 -lgssapi_krb5 -lkrb5 -lk5crypto -lcom_err -lrtmp -lssh2 -lldap"
        fi
        cmake --build . --config $configuration -- -j $(nproc)
        if [ $? -eq 0 ]; then
          cp cjsh $APPVEYOR_BUILD_FOLDER/build/
          cd $APPVEYOR_BUILD_FOLDER/build
        else
          exit 1
        fi
      fi

after_build:
  # Linux packaging
  - sh: |
      cd $APPVEYOR_BUILD_FOLDER/build
      tar -czf CJsShell-Unix.tar.gz cjsh
      appveyor PushArtifact CJsShell-Unix.tar.gz

# Run the tests if you have them
test_script:
  - sh: |
      cd $APPVEYOR_BUILD_FOLDER/build
      ctest -C $configuration -VV

# Artifacts to save
artifacts:
  - path: build\CJsShell-Unix.tar.gz
    name: CJsShell-Unix

# Notifications
notifications:
  - provider: Email
    to:
      - caden@cadenfinley.com
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
