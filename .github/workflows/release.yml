name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  CMAKE_BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - os: macos-12
            arch: x86_64
            artifact_name: cjsh-macos-x86_64
            cmake_args: ""
          - os: macos-14
            arch: arm64
            artifact_name: cjsh-macos-arm64
            cmake_args: ""
          - os: macos-14
            arch: x86_64
            artifact_name: cjsh-macos-x86_64-rosetta
            cmake_args: "-DCMAKE_OSX_ARCHITECTURES=x86_64"
          
          # Linux builds
          - os: ubuntu-20.04
            arch: x86_64
            artifact_name: cjsh-linux-x86_64
            cmake_args: ""
          - os: ubuntu-22.04
            arch: x86_64
            artifact_name: cjsh-linux-x86_64-ubuntu22
            cmake_args: ""
          - os: ubuntu-24.04
            arch: x86_64
            artifact_name: cjsh-linux-x86_64-ubuntu24
            cmake_args: ""

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libcurl4-openssl-dev pkg-config

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} ${{ matrix.cmake_args }}

    - name: Build
      run: |
        cd build
        cmake --build . --config ${{ env.CMAKE_BUILD_TYPE }} --parallel

    - name: Run tests
      if: false  # Disable tests for now to speed up builds
      run: |
        chmod +x tests/run_shell_tests.sh
        ./tests/run_shell_tests.sh

    - name: Package binary (Unix)
      run: |
        cd build
        strip cjsh 2>/dev/null || true  # Strip symbols if possible
        tar -czf ${{ matrix.artifact_name }}.tar.gz cjsh
        
        # Create additional formats
        cp cjsh ${{ matrix.artifact_name }}
        
        # Create checksum
        shasum -a 256 ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256
        shasum -a 256 ${{ matrix.artifact_name }} > ${{ matrix.artifact_name }}.sha256

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          build/${{ matrix.artifact_name }}*
        retention-days: 30

  create-universal-macos:
    needs: build
    runs-on: macos-14
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: cjsh-macos-*
        merge-multiple: true

    - name: Create Universal Binary
      run: |
        # Extract binaries
        tar -xzf cjsh-macos-x86_64.tar.gz
        mv cjsh cjsh-x86_64
        tar -xzf cjsh-macos-arm64.tar.gz  
        mv cjsh cjsh-arm64
        
        # Create universal binary
        lipo -create -output cjsh-universal cjsh-x86_64 cjsh-arm64
        
        # Package universal binary
        tar -czf cjsh-macos-universal.tar.gz cjsh-universal
        shasum -a 256 cjsh-macos-universal.tar.gz > cjsh-macos-universal.tar.gz.sha256

    - name: Upload universal binary
      uses: actions/upload-artifact@v4
      with:
        name: cjsh-macos-universal
        path: cjsh-macos-universal*

  release:
    needs: [build, create-universal-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cjsh-*
        body: |
          ## CJsShell ${{ github.ref_name }}
          
          ### Download Instructions
          
          **macOS:**
          - Intel Macs: `cjsh-macos-x86_64.tar.gz`
          - Apple Silicon: `cjsh-macos-arm64.tar.gz` 
          - Universal (both): `cjsh-macos-universal.tar.gz`
          
          **Linux:**
          - Older distros: `cjsh-linux-x86_64.tar.gz`
          - Modern distros: `cjsh-linux-x86_64-ubuntu22.tar.gz`
          - Latest distros: `cjsh-linux-x86_64-ubuntu24.tar.gz`
          
          ### Quick Install
          ```bash
          # macOS (Universal)
          curl -L https://github.com/CadenFinley/CJsShell/releases/download/${{ github.ref_name }}/cjsh-macos-universal.tar.gz | tar -xz
          sudo mv cjsh-universal /usr/local/bin/cjsh
          
          # Linux (Auto-detect and install)
          curl -sSL https://raw.githubusercontent.com/CadenFinley/CJsShell/master/tool-scripts/install-from-release.sh | bash
          ```
          
          ### Verification
          All binaries include SHA256 checksums for verification.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}