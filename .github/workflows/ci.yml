name: CI Build and Test

permissions:
  contents: read

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'site/**'
      - 'themes/**'
      - '*.md'
      - 'LICENSE'
      - 'mkdocs.yml'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - 'site/**'
      - 'themes/**'
      - '*.md'
      - 'LICENSE'
      - 'mkdocs.yml'
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: CJsShell-Linux
          - os: macos-latest
            artifact-name: CJsShell-macOS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y libdl-dev || true
          sudo apt-get install -y ccache

      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install ccache || true

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-ccache
          max-size: 500M

      - name: Configure CMake
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCJSH_GENERATE_COMPILE_COMMANDS=ON

      - name: Build CJsShell
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            cmake --build build --config Release
          else
            cmake --build build --config Release --parallel
          fi

      - name: Verify build output
        run: |
          if [ ! -f "build/cjsh" ]; then
            echo "Error: build/cjsh not found"
            exit 1
          fi
          echo "CJsShell binary exists"
          ls -lh build/cjsh

      - name: Run tests
        run: |
          chmod +x tests/run_shell_tests.sh
          echo "Running test suite..."
          
          # Capture test output and exit code
          set +e
          TEST_OUTPUT=$(./tests/run_shell_tests.sh 2>&1)
          TEST_EXIT_CODE=$?
          set -e
          
          echo "$TEST_OUTPUT"
          
          # On macOS CI runners, allow certain environment-specific test failures
          # if the overall pass rate is >= 95%
          if [ $TEST_EXIT_CODE -ne 0 ]; then
            if [ "${{ runner.os }}" = "macOS" ]; then
              # Extract pass rate from test output
              PASS_RATE=$(echo "$TEST_OUTPUT" | grep -o 'Pass rate: [0-9.]*%' | grep -o '[0-9.]*' || echo "0")
              
              if [ -n "$PASS_RATE" ]; then
                echo "macOS CI detected pass rate: ${PASS_RATE}%"
                
                # Use awk to compare floating point numbers
                MEETS_THRESHOLD=$(awk -v rate="$PASS_RATE" 'BEGIN {print (rate >= 95.0) ? "yes" : "no"}')
                
                if [ "$MEETS_THRESHOLD" = "yes" ]; then
                  echo "✓ Pass rate (${PASS_RATE}%) meets minimum threshold of 95%"
                  echo "These are known environment-specific failures in GitHub Actions macOS runners."
                  echo "Signal handling and TTY tests behave differently in CI vs local environments."
                  exit 0
                else
                  echo "✗ Pass rate (${PASS_RATE}%) is below minimum threshold of 95%"
                  echo "Tests failed with exit code: $TEST_EXIT_CODE"
                  exit 1
                fi
              else
                echo "Warning: Could not extract pass rate from test output"
                echo "Tests failed with exit code: $TEST_EXIT_CODE"
                exit 1
              fi
            else
              echo "Tests failed with exit code: $TEST_EXIT_CODE"
              exit 1
            fi
          fi

      - name: Create artifact archive
        run: |
          cd build
          tar -czf ${{ matrix.artifact-name }}.tar.gz cjsh
          echo "Created artifact: ${{ matrix.artifact-name }}.tar.gz"
          ls -lh ${{ matrix.artifact-name }}.tar.gz

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: build/${{ matrix.artifact-name }}.tar.gz
          retention-days: 30

      - name: Upload binary for release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: build/${{ matrix.artifact-name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ci-success:
    name: CI Success
    needs: [build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: always()
    steps:
      - name: Check build results
        run: |
          if [ "${{ needs.build-and-test.result }}" != "success" ]; then
            echo "CI failed"
            exit 1
          fi
          echo "All CI checks passed!"
