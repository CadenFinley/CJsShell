@startuml DevToolsTerminal

' Main classes and components
class Main {
  ' Global variables
  -bool rawModeEnabled
  -bool saveLoop
  -bool saveOnExit
  -bool shortcuts Enabled
  -bool startCommandsOn
  -bool usingChatCache
  -bool checkForUpdates
  -std::string commandPrefix
  -std::string lastCommandParsed
  -std::string applicationDirectory
  -std::string currentTheme
  -std::filesystem::path DATA_DIRECTORY
  ' Methods
  +int main()
  -void mainProcessLoop()
  -void commandParser(std::string command)
  -void commandProcesser(std::string command)
  -void getNextCommand()
}

class TerminalPassthrough {
  -std::string shellColor
  -std::string directoryColor
  -std::string branchColor
  -std::string gitColor
  -bool displayWholePath
  +std::thread executeCommand(std::string command)
  +std::string returnCurrentTerminalPosition()
  +std::string getPreviousCommand()
  +std::string getNextCommand()
  +std::string returnMostRecentUserInput()
  +std::string returnMostRecentTerminalOutput()
  +std::vector<std::string> getFilesAtCurrentPath()
  +std::string getFullPathOfFile(std::string filename)
  +std::string getCurrentFilePath()
  +void setEnvVar(std::string name, std::string value)
  +std::string getEnvVar(std::string name)
  +bool hasEnvVar(std::string name)
  +void removeEnvVar(std::string name)
  +std::map<std::string, std::string> getAllEnvVars()
  +std::string expandEnvVars(std::string text)
}

class OpenAIPromptEngine {
  -std::string apiKey
  -std::string model
  -std::string assistantType
  -std::vector<std::string> chatCache
  -std::string lastPromptUsed
  -std::string lastResponseReceived
  -std::vector<std::string> files
  -std::string fileContents
  +setAPIKey(std::string key)
  +std::string getAPIKey()
  +bool testAPIKey(std::string key)
  +std::string chatGPT(std::string message, bool async)
  +std::string forceDirectChatGPT(std::string message, bool async)
  +std::vector<std::string> getChatCache()
  +void setChatCache(std::vector<std::string> cache)
  +void clearChatCache()
  +int addFile(std::string filePath)
  +int addFiles(std::vector<std::string> filePaths)
  +void removeFile(std::string filePath)
  +void clearFiles()
  +void refreshFiles()
}

class PluginManager {
  -std::filesystem::path pluginsDirectory
  -std::vector<std::string> availablePlugins
  -std::vector<std::string> enabledPlugins
  +void discoverPlugins()
  +bool enablePlugin(std::string name)
  +bool disablePlugin(std::string name)
  +std::vector<std::string> getAvailablePlugins()
  +std::vector<std::string> getEnabledPlugins()
  +std::vector<std::string> getPluginCommands(std::string plugin)
  +std::string getPluginInfo(std::string plugin)
  +bool installPlugin(std::string path)
  +bool uninstallPlugin(std::string name)
  +bool updatePluginSetting(std::string plugin, std::string setting, std::string value)
  +void handlePluginCommand(std::string plugin, std::queue<std::string> args)
  +void triggerSubscribedGlobalEvent(std::string eventName, std::string data)
}

class ThemeManager {
  -std::filesystem::path themesDirectory
  -std::map<std::string, std::string> currentTheme
  +bool loadTheme(std::string name)
  +bool saveTheme(std::string name, std::map<std::string, std::string> colors)
  +std::string getColor(std::string colorName)
}

' Relationships
Main --> TerminalPassthrough : uses
Main --> OpenAIPromptEngine : uses
Main --> PluginManager : owns
Main --> ThemeManager : owns

' Command processing flow
note right of Main::mainProcessLoop
  1. Capture user input
  2. Parse commands
  3. Execute commands
  4. Handle AI interactions
  5. Save user data
  6. Pass through to terminal
end note

' Feature categories
together {
  class CommandFeatures {
    ' Command-related functionalities 
    + terminal commands
    + shortcuts
    + multi-script shortcuts
  }

  class AIFeatures {
    ' AI-related functionalities
    + chat with AI
    + context management
    + file handling for AI
  }
  
  class PluginFeatures {
    ' Plugin-related functionalities
    + load/unload plugins
    + plugin command handling
    + plugin settings management
  }
  
  class ThemeFeatures {
    ' Theme-related functionalities
    + load/save themes
    + color configuration
  }
}

' These are logical groupings, not actual classes
Main -- CommandFeatures : implements
Main -- AIFeatures : implements
Main -- PluginFeatures : implements
Main -- ThemeFeatures : implements

@enduml
